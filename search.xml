<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>work life balance</title>
      <link href="/2023/08/10/work%20life%20balance/"/>
      <url>/2023/08/10/work%20life%20balance/</url>
      
        <content type="html"><![CDATA[<h2 id="Work-Life-Balance"><a href="#Work-Life-Balance" class="headerlink" title="Work Life Balance"></a>Work Life Balance</h2><p>​    “Work life balance”,这是很多人对工作和生活的完美想象。我们是为了生活而工作，还是因为工作而得以生活得更好。生活就是在找一个平衡点，找一个万事万物的平衡点，只有达到这个 平衡点，我们的一切才能更加顺利的进行。</p><hr><h4 id="身处中国，我们如何才能做到wlb呢？"><a href="#身处中国，我们如何才能做到wlb呢？" class="headerlink" title="身处中国，我们如何才能做到wlb呢？*"></a>身处中国，我们如何才能做到wlb呢？*</h4><p><a href="https://imgse.com/i/pPm6VmV"><img src="https://s1.ax1x.com/2023/08/10/pPm6VmV.png" alt="pPm6VmV.png"></a></p><p>​    中国的工作文化有很多，即有人追求996，相信努力工作能带来 更好的经济收益，因此来改善经济；也有人 热衷于 享受生活，做一个及时享乐的人；也有人喜欢提前消费，经常使用花呗等借贷工具来购物，等工资下来了就是还款的时候；有人喜欢存钱，也有人喜欢花钱。每个人的生活习惯和消费习惯都不一样。</p><p>​    有一部分人，工作充满了他们的生活，以至于他们没有很难抽得出时间来与朋友们出去聚会。这一部分人，通常是已婚有子女，正在供房贷或者车贷，上有老下有小。现实情况不允许他们有喘息的时间，甚至不会允许他们有自己的pastime。基于这种情况，越来越多的年轻人选择不买房不结婚，他们将这笔钱投资在自己身上，选择去提升自己、旅游或者与朋友出去玩等等……我的身边就不乏这种人，在中国这种经济情况下，这种人也有可能越来越多。</p><p>​    还有一部分人，我们称其为“三和大神”，现在这不仅仅具体指某一种人，而是可以用来泛指那些“赚多少花多少，用完接着赚的人“，这种人基本上不会有什么积蓄，他们也不需要什么积蓄。你可以说他懒惰，但是在他们自己眼里，他们只是纯粹的及时享乐主义者。</p><p>​    其实在笔者看来，只要自己觉得舒服的生活状态，就可以称为wlb，不管你的生活被工作所充斥，还是及时赚钱及时花。</p>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于香港</title>
      <link href="/2023/06/08/%E5%85%B3%E4%BA%8E%E9%A6%99%E6%B8%AF/"/>
      <url>/2023/06/08/%E5%85%B3%E4%BA%8E%E9%A6%99%E6%B8%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="上周日去了趟香港，也是第一次去香港，有几个感觉："><a href="#上周日去了趟香港，也是第一次去香港，有几个感觉：" class="headerlink" title="上周日去了趟香港，也是第一次去香港，有几个感觉："></a>上周日去了趟香港，也是第一次去香港，有几个感觉：</h2><ol><li><h4 id="香港的城市规划很漂亮，虽然建筑大多都老旧，但是尖沙咀和中环那一代的建筑群都很有层次感，可能是因为建在山上的原因。"><a href="#香港的城市规划很漂亮，虽然建筑大多都老旧，但是尖沙咀和中环那一代的建筑群都很有层次感，可能是因为建在山上的原因。" class="headerlink" title="香港的城市规划很漂亮，虽然建筑大多都老旧，但是尖沙咀和中环那一代的建筑群都很有层次感，可能是因为建在山上的原因。"></a>香港的城市规划很漂亮，虽然建筑大多都老旧，但是尖沙咀和中环那一代的建筑群都很有层次感，可能是因为建在山上的原因。</h4></li><li><h4 id="周日的香港，菲佣是真的很多，大多都在天桥底下或者马路边，围在一起吃吃喝喝，无忧无虑的感觉。"><a href="#周日的香港，菲佣是真的很多，大多都在天桥底下或者马路边，围在一起吃吃喝喝，无忧无虑的感觉。" class="headerlink" title="周日的香港，菲佣是真的很多，大多都在天桥底下或者马路边，围在一起吃吃喝喝，无忧无虑的感觉。"></a>周日的香港，菲佣是真的很多，大多都在天桥底下或者马路边，围在一起吃吃喝喝，无忧无虑的感觉。</h4></li><li><h4 id="在香港，用三星手机的人明显比大陆的多得多。而且用三星手机的大概率就是香港本地人。"><a href="#在香港，用三星手机的人明显比大陆的多得多。而且用三星手机的大概率就是香港本地人。" class="headerlink" title="在香港，用三星手机的人明显比大陆的多得多。而且用三星手机的大概率就是香港本地人。"></a>在香港，用三星手机的人明显比大陆的多得多。而且用三星手机的大概率就是香港本地人。</h4></li><li><h4 id="外国人是真的多，各个种族的都有。可能是外国人比较容易入港旅游吧。"><a href="#外国人是真的多，各个种族的都有。可能是外国人比较容易入港旅游吧。" class="headerlink" title="外国人是真的多，各个种族的都有。可能是外国人比较容易入港旅游吧。"></a>外国人是真的多，各个种族的都有。可能是外国人比较容易入港旅游吧。</h4></li><li><h4 id="印度老哥也是真的多，而且他们从事的大多都是外卖行业，每条街上基本都能看见骑着摩托车的印度老哥。"><a href="#印度老哥也是真的多，而且他们从事的大多都是外卖行业，每条街上基本都能看见骑着摩托车的印度老哥。" class="headerlink" title="印度老哥也是真的多，而且他们从事的大多都是外卖行业，每条街上基本都能看见骑着摩托车的印度老哥。"></a>印度老哥也是真的多，而且他们从事的大多都是外卖行业，每条街上基本都能看见骑着摩托车的印度老哥。</h4></li></ol><h2 id="顺便分享一些在香港拍的照片"><a href="#顺便分享一些在香港拍的照片" class="headerlink" title="顺便分享一些在香港拍的照片"></a>顺便分享一些在香港拍的照片</h2><p><a href="https://imgtg.com/image/O5SBSc"><img src="https://i.imgtg.com/2023/06/08/O5SBSc.md.jpg" alt="O5SBSc.md.jpg"></a><br><a href="https://imgtg.com/image/O5SbDG"><img src="https://i.imgtg.com/2023/06/08/O5SbDG.md.jpg" alt="O5SbDG.md.jpg"></a><br><a href="https://imgtg.com/image/O5SW1M"><img src="https://i.imgtg.com/2023/06/08/O5SW1M.md.jpg" alt="O5SW1M.md.jpg"></a><br><a href="https://imgtg.com/image/O5S5Kq"><img src="https://i.imgtg.com/2023/06/08/O5S5Kq.md.jpg" alt="O5S5Kq.md.jpg"></a><br><a href="https://imgtg.com/image/O5STwr"><img src="https://i.imgtg.com/2023/06/08/O5STwr.md.jpg" alt="O5STwr.md.jpg"></a><br><a href="https://imgtg.com/image/O5Sk81"><img src="https://i.imgtg.com/2023/06/08/O5Sk81.md.jpg" alt="O5Sk81.md.jpg"></a><br><a href="https://imgtg.com/image/O5SzkI"><img src="https://i.imgtg.com/2023/06/08/O5SzkI.md.jpg" alt="O5SzkI.md.jpg"></a><br><a href="https://imgtg.com/image/O5SFpD"><img src="https://i.imgtg.com/2023/06/08/O5SFpD.md.jpg" alt="O5SFpD.md.jpg"></a><br><a href="https://imgtg.com/image/O5ShfF"><img src="https://i.imgtg.com/2023/06/08/O5ShfF.md.jpg" alt="O5ShfF.md.jpg"></a><br><a href="https://imgtg.com/image/O5Sn56"><img src="https://i.imgtg.com/2023/06/08/O5Sn56.md.jpg" alt="O5Sn56.md.jpg"></a><br><a href="https://imgtg.com/image/O5S1KP"><img src="https://i.imgtg.com/2023/06/08/O5S1KP.md.jpg" alt="O5S1KP.md.jpg"></a><br><a href="https://imgtg.com/image/O5S70b"><img src="https://i.imgtg.com/2023/06/08/O5S70b.md.jpg" alt="O5S70b.md.jpg"></a><br><a href="https://imgtg.com/image/O5SNwl"><img src="https://i.imgtg.com/2023/06/08/O5SNwl.md.jpg" alt="O5SNwl.md.jpg"></a><br><a href="https://imgtg.com/image/O5Sr1g"><img src="https://i.imgtg.com/2023/06/08/O5Sr1g.md.jpg" alt="O5Sr1g.md.jpg"></a><br><a href="https://imgtg.com/image/O5SAHB"><img src="https://i.imgtg.com/2023/06/08/O5SAHB.md.jpg" alt="O5SAHB.md.jpg"></a><br><a href="https://imgtg.com/image/O5SK8s"><img src="https://i.imgtg.com/2023/06/08/O5SK8s.md.jpg" alt="O5SK8s.md.jpg"></a><br><a href="https://imgtg.com/image/O5SvxK"><img src="https://i.imgtg.com/2023/06/08/O5SvxK.md.jpg" alt="O5SvxK.md.jpg"></a><br><a href="https://imgtg.com/image/O5SyJa"><img src="https://i.imgtg.com/2023/06/08/O5SyJa.md.jpg" alt="O5SyJa.md.jpg"></a><br><a href="https://imgtg.com/image/O5SgfS"><img src="https://i.imgtg.com/2023/06/08/O5SgfS.md.jpg" alt="O5SgfS.md.jpg"></a><br><a href="https://imgtg.com/image/O5SpBN"><img src="https://i.imgtg.com/2023/06/08/O5SpBN.md.jpg" alt="O5SpBN.md.jpg"></a><br><a href="https://imgtg.com/image/O5SJKC"><img src="https://i.imgtg.com/2023/06/08/O5SJKC.md.jpg" alt="O5SJKC.md.jpg"></a><br><a href="https://imgtg.com/image/O5SP0L"><img src="https://i.imgtg.com/2023/06/08/O5SP0L.md.jpg" alt="O5SP0L.md.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保持摄影的独立性，减少计算摄影</title>
      <link href="/2023/05/15/%E8%AE%A1%E7%AE%97%E6%91%84%E5%BD%B1/"/>
      <url>/2023/05/15/%E8%AE%A1%E7%AE%97%E6%91%84%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<p>计算摄影是一种利用计算机技术和图像处理算法来进行摄影的技术。与传统摄影不同的是，计算摄影使用数字相机和计算机软件来对图像进行后期处理和优化，从而获得更加高质量的图像。</p><p><em>在计算摄影中，人们使用一些常见的图像处理算法来对图像进行处理，例如锐化、降噪、色彩平衡、调整曝光等。这些算法可以自动处理图像，使得摄影师可以更加专注于构图和拍摄过程，而无需担心后期处理的问题。</em></p><p>除了常见的图像处理算法，计算摄影还包括一些高级技术，例如HDR（高动态范围）和全景摄影。HDR摄影通过将多张不同曝光的照片合并在一起，以获得更广泛的动态范围，从而产生更加逼真的图像。全景摄影则通过拍摄多张照片，然后使用软件将这些照片拼接在一起，以产生一个完整的全景图像。</p><p>计算摄影还包括其他一些技术，例如图像识别和计算机视觉。这些技术可以自动检测照片中的对象，并对它们进行标记和分类。这些功能使得计算摄影可以用于许多不同的应用，例如虚拟现实、增强现实、医学影像等领域。</p><p>总之，计算摄影是一种利用计算机技术和图像处理算法来进行摄影的技术。它可以使摄影师更加专注于构图和拍摄过程，而无需担心后期处理的问题。它还可以通过一些高级技术，例如HDR和全景摄影，产生更加逼真的图像，同时也可以用于许多不同的应用领域。</p><hr><p>计算摄影虽然在某些方面能够提高照片的质量，但也存在一些问题。首先，计算摄影需要使用数字相机和计算机软件进行处理，这需要花费大量的时间和金钱。对于那些没有足够预算和资源的人来说，这可能是一个不切实际的选项。</p><p>其次，计算摄影可能会导致照片过于人工化和不真实。图像处理算法可以使照片看起来更加完美，但这可能会导致照片失去真实感和生动性。摄影的本质在于捕捉和记录真实的场景和情感，而计算摄影可能会导致人们迷失在过于工整和修饰的图像中。</p><p>此外，计算摄影可能会让人们过于依赖技术，而不是专注于自己的摄影技能。使用计算机软件来处理照片可以使人们轻松地获得完美的效果，但这也可能导致人们对自己的技能和经验过于依赖。</p><p>最后，计算摄影也可能会引发一些伦理问题。例如，图像识别和计算机视觉技术可以使人们轻松地检测和识别照片中的对象，这也可能会导致一些隐私和安全问题。</p><p>综上所述，计算摄影虽然在某些方面有一定的优势，但也存在一些问题和不足。对于那些想要真正表达自己的摄影技能和记录真实场景的人来说，计算摄影可能并不是最佳选择。</p><p><a href="https://imgse.com/i/p9gHwoq"><img src="https://s1.ax1x.com/2023/05/15/p9gHwoq.md.jpg" alt="p9gHwoq.jpg" border="0" /></a></p><hr><h2 id="计算摄影的技术还未成熟"><a href="#计算摄影的技术还未成熟" class="headerlink" title="计算摄影的技术还未成熟"></a>计算摄影的技术还未成熟</h2><h4 id="计算摄影是一项前沿的技术，然而，目前的技术在实际应用中往往并不能达到预期的效果。尽管计算机软件可以通过各种图像处理算法对照片进行优化，但很多时候计算出来的照片并不令人满意。"><a href="#计算摄影是一项前沿的技术，然而，目前的技术在实际应用中往往并不能达到预期的效果。尽管计算机软件可以通过各种图像处理算法对照片进行优化，但很多时候计算出来的照片并不令人满意。" class="headerlink" title="计算摄影是一项前沿的技术，然而，目前的技术在实际应用中往往并不能达到预期的效果。尽管计算机软件可以通过各种图像处理算法对照片进行优化，但很多时候计算出来的照片并不令人满意。"></a><em>计算摄影是一项前沿的技术，然而，目前的技术在实际应用中往往并不能达到预期的效果。尽管计算机软件可以通过各种图像处理算法对照片进行优化，但很多时候计算出来的照片并不令人满意。</em></h4><p>首先，计算摄影的结果往往过于人工和不真实。图像处理算法可能过度增强对比度、饱和度和锐化等参数，使照片看起来过于夸张和不自然。这使得照片失去了原本的纯真和艺术感，让人们产生审美疲劳。</p><p>其次，当前的计算摄影技术还无法充分理解照片的语境和情感。尽管有一些自动识别算法可以检测物体和人脸等元素，但在进行图像编辑时，它们往往无法正确理解摄影师的意图和创造力。这导致计算出来的照片与原始照片之间存在差距，并且很难捕捉到摄影师想要传达的情感和故事。</p><p>此外，计算摄影技术的普及也存在一定的门槛。许多高级的计算摄影软件需要复杂的设置和调整，普通用户难以操作。而且，这些软件通常需要高性能的计算机和大量的存储空间，这对于一些摄影爱好者来说是一个不小的负担。</p><p>目前的计算摄影技术还不够成熟，其处理出来的照片往往不令人满意。过于人工和不真实的效果以及对照片语境和情感的理解不足，都是当前技术面临的挑战。</p><p><a href="https://imgse.com/i/p9gHWwR"><img src="https://s1.ax1x.com/2023/05/15/p9gHWwR.jpg" alt="p9gHWwR.jpg" border="0" /></a></p><hr><p>即使像苹果这样的公司也无法避免计算摄影技术的成熟度问题。尽管苹果在其手机摄影技术上取得了显著进展，但仍然存在一些限制和不足。</p><p>苹果的计算摄影技术在某些方面表现出色，例如它的智能HDR功能和低光条件下的优化。然而，即使对于苹果来说，这项技术仍然面临着一些挑战。在某些情况下，它的图像处理算法可能会导致过度增强的效果，使照片看起来过于人工和不真实。</p><p>此外，对于其他公司的计算摄影技术来说，照片处理的速度也是一个问题。一些公司的摄影软件在拍摄后需要等待几秒钟甚至更长时间才能生成成片。而且，即使等待时间过后，成片的效果也存在差异，有些照片可能质量不佳。这使得用户无法实时预览和调整照片，对于那些追求即时反馈和准确结果的摄影师来说，这是一个明显的不便之处。</p><p>无论是苹果还是其他公司，计算摄影技术的成熟度都存在局限性。过度增强的效果、处理速度的延迟以及成片效果的不一致性都是当前技术面临的问题。这些问题限制了计算摄影的实际应用和用户体验。虽然我们期待技术的进一步发展和改进，但目前来看，计算摄影技术仍然有待提高。</p><p><a href="https://imgse.com/i/p9gHTSO"><img src="https://s1.ax1x.com/2023/05/15/p9gHTSO.jpg" alt="p9gHTSO.jpg" border="0" /></a></p><hr><h2 id="违背”所见即所得“的摄影初衷"><a href="#违背”所见即所得“的摄影初衷" class="headerlink" title="违背”所见即所得“的摄影初衷"></a>违背”所见即所得“的摄影初衷</h2><p>计算摄影与传统摄影的”所见即所得”原则存在明显的背离。”所见即所得”是摄影的核心理念，它强调摄影师通过观察场景和调整相机设置来直接捕捉并记录真实的图像。</p><p>然而，计算摄影技术通过后期图像处理和优化，使得最终呈现的照片与实际场景之间存在明显的差异。这意味着摄影师无法准确地在拍摄的瞬间预测最终的图像效果，因为它会被计算机软件所改变和增强。</p><p>这种违背了”所见即所得”原则的特性，使得摄影师与被摄对象之间的直接联系受到了削弱。摄影师无法完全依赖自己的观察和技术来实现他们的创意，而需要依赖计算机算法来达到他们所期望的图像效果。</p><p>此外，计算摄影技术也对摄影师的技能和创造力提出了一定的挑战。传统摄影需要摄影师通过调整相机设置、构图和抓拍瞬间来达到理想的结果。然而，计算摄影技术倾向于将这些决策和调整留给计算机软件来处理，从而减少了摄影师的主观影响力。</p><p>因此，计算摄影技术在追求完美图像的同时，也牺牲了摄影师的创作自由和原创性。摄影师的个人风格和独特视角在计算摄影中可能被标准化和普遍化，使得照片失去了独特性和个性。</p><p>计算摄影技术违背了”所见即所得”的摄影初衷。它通过后期处理和优化图像，与实际场景存在差异，削弱了摄影师与被摄对象之间的直接联系。同时，它也对摄影师的技能和创造力提出了挑战，使得照片过于标准化和失去独特性。这些因素使得计算摄影在某种程度上与传统摄影的原则和理念相悖。</p><hr><h2 id="限制摄影师的自由发挥"><a href="#限制摄影师的自由发挥" class="headerlink" title="限制摄影师的自由发挥"></a>限制摄影师的自由发挥</h2><p>传统摄影鼓励摄影师依靠自己的感觉和判断来捕捉瞬间，并通过相机设置和构图来表达自己的视觉理念和创意。然而，计算摄影技术的介入，特别是自动化的图像处理算法，可能削弱了摄影师在摄影过程中的主观决策权。</p><p>一方面，计算摄影技术通常会默认应用一些预设的图像优化算法，这可能限制了摄影师对于图像风格和表达方式的选择。摄影师可能会发现自己被迫使用与其他人相似的图像处理效果，而失去了对于独特风格和个人视觉语言的追求。</p><p>另一方面，计算摄影技术中的自动化处理也可能剥夺了摄影师在后期处理中的自由度。虽然这些算法可以快速地改善图像质量，但它们往往是根据广泛的样本和平均化的标准进行操作。这意味着摄影师可能无法自由地调整每个图像的细节，而被限制在固定的选项和参数范围内。</p><p>此外，计算摄影技术也可能影响摄影师在构图和角度选择上的自由度。一些计算摄影软件提供了自动裁剪和角度校正的功能，这虽然可以纠正一些拍摄中的错误，但也可能剥夺了摄影师在后期裁剪和构图中的自主权。</p><h5 id="因此，计算摄影技术在一定程度上限制了摄影师的自由发挥和创造性。它可能削弱了摄影师的主观决策权，导致照片在风格和表达上缺乏个性和独特性。虽然计算摄影技术提供了便利和快速的图像处理能力，但在某些方面也剥夺了摄影师追求自由创作的权利。"><a href="#因此，计算摄影技术在一定程度上限制了摄影师的自由发挥和创造性。它可能削弱了摄影师的主观决策权，导致照片在风格和表达上缺乏个性和独特性。虽然计算摄影技术提供了便利和快速的图像处理能力，但在某些方面也剥夺了摄影师追求自由创作的权利。" class="headerlink" title="因此，计算摄影技术在一定程度上限制了摄影师的自由发挥和创造性。它可能削弱了摄影师的主观决策权，导致照片在风格和表达上缺乏个性和独特性。虽然计算摄影技术提供了便利和快速的图像处理能力，但在某些方面也剥夺了摄影师追求自由创作的权利。"></a><em><strong>因此，计算摄影技术在一定程度上限制了摄影师的自由发挥和创造性。它可能削弱了摄影师的主观决策权，导致照片在风格和表达上缺乏个性和独特性。虽然计算摄影技术提供了便利和快速的图像处理能力，但在某些方面也剥夺了摄影师追求自由创作的权利。</strong></em></h5>]]></content>
      
      
      <categories>
          
          <category> 摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件 or 网络</title>
      <link href="/2023/05/11/%E7%BC%96%E7%A8%8B%20or%20%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/05/11/%E7%BC%96%E7%A8%8B%20or%20%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="关于最近找工作的碰壁"><a href="#关于最近找工作的碰壁" class="headerlink" title="关于最近找工作的碰壁"></a>关于最近找工作的碰壁</h1><h2 id="关于最近"><a href="#关于最近" class="headerlink" title="关于最近"></a>关于最近</h2><h3 id="3月底插本考试结束后，就回到家里等分数。结果在家里摆了两个月，求职路上也是一路碰壁。2k的底薪，结果给我画饼画到7k以上，最后还发现是个骗子公司；后面也碰到几个感觉是骗子的公司，怎么说，不一定是骗子，但一定有套路。"><a href="#3月底插本考试结束后，就回到家里等分数。结果在家里摆了两个月，求职路上也是一路碰壁。2k的底薪，结果给我画饼画到7k以上，最后还发现是个骗子公司；后面也碰到几个感觉是骗子的公司，怎么说，不一定是骗子，但一定有套路。" class="headerlink" title="3月底插本考试结束后，就回到家里等分数。结果在家里摆了两个月，求职路上也是一路碰壁。2k的底薪，结果给我画饼画到7k以上，最后还发现是个骗子公司；后面也碰到几个感觉是骗子的公司，怎么说，不一定是骗子，但一定有套路。"></a>3月底插本考试结束后，就回到家里等分数。结果在家里摆了两个月，求职路上也是一路碰壁。2k的底薪，结果给我画饼画到7k以上，最后还发现是个骗子公司；后面也碰到几个感觉是骗子的公司，怎么说，不一定是骗子，但一定有套路。</h3><h2 id="关于未来打算"><a href="#关于未来打算" class="headerlink" title="关于未来打算"></a>关于未来打算</h2><h3 id="目前来看，只能说走一步看一步。要有长远一点的规划。我的规划就是转网络，弃编程。原因："><a href="#目前来看，只能说走一步看一步。要有长远一点的规划。我的规划就是转网络，弃编程。原因：" class="headerlink" title="目前来看，只能说走一步看一步。要有长远一点的规划。我的规划就是转网络，弃编程。原因："></a>目前来看，只能说走一步看一步。要有长远一点的规划。我的规划就是转网络，弃编程。原因：</h3><ol><li>软件市场日趋饱和，每个人看到都想来掺和一脚，实际上软件市场需求量早就不像几年那样吃香了。</li><li>随着GPT的发展，初级软件工程师被替代也只能说是指日可待了。现在的GPT已经能完成一些基础的编程工作。更加恐怖的是，GPT能完成各种语言并且是全栈的，随着GPT的继续发展，普通刚毕业的大学生，除非特别有实力的，剩下的怎么看和GPT相比也没有什么竞争力.</li><li>个人其实更加偏向于喜欢网络一点，这一点从我小时候喜欢捯饬手机上的黑科技，到fq带给我的成就感，都可以感觉出来。</li><li>编程语言的发展速度越来越快，随着各种语言的诞生，刚毕业的普通人是不可能把所有语言都学精通的。当你学完一门语言之后，你会发现，现在的公司都要求要会多种语言，并且前后端交互要精通。当你精通一门语言之后，运气不好的话，你学的这门语言可能已经落后于市场所需，被淘汰了。</li><li>这两年来大厂的不断裁员，中外的大厂都在不断裁员，那被裁的这一批该学历且有丰富经历的人才会被下放到普通的市场上，那普通人拿什么和他们竞争呢？人家的简历上可是赫然印着大厂的工作经历，有着怎么样的大项目。那我们，普通人，应该拿什么去竞争呢？</li></ol><h3 id="综上考虑，我最终考虑转向网络方面。"><a href="#综上考虑，我最终考虑转向网络方面。" class="headerlink" title="综上考虑，我最终考虑转向网络方面。"></a>综上考虑，我最终考虑转向网络方面。</h3><hr><h3 id="下面是我对chat-GPT的询问。"><a href="#下面是我对chat-GPT的询问。" class="headerlink" title="下面是我对chat-GPT的询问。"></a>下面是我对chat-GPT的询问。</h3><p>我：    软件开发和网络工程，哪一个更加有发展前景呢？</p><p>GPT:    软件开发和网络工程都是技术领域中具有广阔发展前景的专业领域。以下是对两者的发展前景进行的简要比较：</p><p>软件开发：随着技术的不断进步和数字化转型的加速，软件开发行业一直保持着强劲的增长势头。软件在各行各业中发挥着关键作用，需求持续增长。移动应用、Web应用、云计算、人工智能、大数据等领域都对软件开发人员的需求很高。软件开发还有创业和自主开发的机会，能够构建自己的产品或服务。此外，软件开发人员通常具备的编程和问题解决能力在不同行业中也非常有价值。</p><p>网络工程：随着互联网的快速发展和全球数字化的加速，网络工程师的需求也在不断增长。网络工程师负责设计、构建和维护网络基础设施，确保网络安全和高效运行。随着物联网、云计算和边缘计算等新技术的兴起，对网络工程师的需求将继续增长。网络安全也是一个重要的领域，对网络工程师的需求越来越高。</p><p>总结来说，软件开发和网络工程都是具有良好发展前景的专业领域。选择哪个取决于个人的兴趣、技能和职业目标。如果你对编程、软件架构和应用开发更感兴趣，那么软件开发可能更适合你。如果你对网络基础设施、网络安全和网络架构更感兴趣，那么网络工程可能更适合你。无论选择哪个领域，都需要不断学习和跟进最新的技术发展，以保持竞争力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差生翻身把歌唱</title>
      <link href="/2023/05/09/%E5%B7%AE%E7%94%9F%E7%BF%BB%E8%BA%AB%E6%8A%8A%E6%AD%8C%E5%94%B1/"/>
      <url>/2023/05/09/%E5%B7%AE%E7%94%9F%E7%BF%BB%E8%BA%AB%E6%8A%8A%E6%AD%8C%E5%94%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="差生的翻身把歌唱"><a href="#差生的翻身把歌唱" class="headerlink" title="差生的翻身把歌唱"></a>差生的翻身把歌唱</h2><h3 id="1-专插本成绩"><a href="#1-专插本成绩" class="headerlink" title="1 . 专插本成绩"></a>1 . 专插本成绩</h3><img src="https://s1.ax1x.com/2023/05/09/p9BCzCV.jpg" height="50%" width="50%" /><p>政治70分，英语90分，高等数学90分，计算机基础与程序设计162，总分412分，排名第190。</p><h3 id="2-升本背景以及初衷"><a href="#2-升本背景以及初衷" class="headerlink" title="2 . 升本背景以及初衷"></a>2 . 升本背景以及初衷</h3><p>本人毕业于广东交通职业技术学院软件技术专业。大专三年，摆烂两年。前两年每天都在打篮球和打游戏中度过，到了第三年，也就是大三上学期的时候，才意识到再摆烂下去，今年可能就寄了，然后就是每天泡图书馆，因为大三没课，所以每天从早上的8点一直待到晚上8点以后。</p><p>其实大一就已经开始想着专插本了。但是本人败就败在自制力和行动力太差。五千块的教育机构钱就教了，接着继续摆烂。现在想想真的恨不得回去抽自己两巴掌。但凡早点开始复习，拿多两分，又能甩掉起码10个人，选择的机会就大不相同了。</p><p>曾经看到一句评论，说复习专插本只要留大三一年的时间就够了。我想说，尽早开始复习（这里指的是高强度的复习，每天刷题背毛概的那种，不是偶尔看看书的那种）。大三一年，还有很多事情要做的：学分要搞，各种证明要搞。这些都会浪费掉你一些时间的。加上专插本考试在3月份，大三开始备考的话其实也就半年左右备考时间。对于想考公办计算机的学生来说，远远不够！</p><p>至于要不要报教育机构，在这里多提一嘴，本人的建议是：别报！！！本人以及身边同学报了的，无一不说自己是个大冤种。报了这个其实就是给自己的前期买个心安理得的摆烂借口。因为其实教育机构给的资料，自己绝大部分都能在网上找得到，没必要去花几千块买几本书，真的血亏。至于最后报不报，还是看你们个人，毕竟每个人情况不一样，我只是给个建议。</p><h3 id="3-各科复习经验"><a href="#3-各科复习经验" class="headerlink" title="3 . 各科复习经验"></a>3 . 各科复习经验</h3><h4 id="3-1-高等数学"><a href="#3-1-高等数学" class="headerlink" title="3.1 高等数学"></a><em>3.1 高等数学</em></h4><p>数学可以说是我复习以来印象最深刻的一科。我的数学基础可以说是百孔千疮，然后随着每天的刷题，以肉眼可见的速度在提高成绩。本人认为数学学习最重要的是方法。方法和刷题量到位了，成绩自然也就上去了。实话说，我的数学是真的差，最后是靠着正确的方法和大量的刷题才能有如此大的效果。</p><p>第一轮我是刷库课的题和看宋浩专升本的视频，效果确实有，至少让我过了一遍基础，但是实际做题还是三四十分的水平。</p><img src="https://s1.ax1x.com/2023/05/09/p9BPg2T.jpg" height="50%" width="50%" /><p>转折点出现在后面，有一天刷了一套往年真题，发现其实真题的难度也不过如此，虽然我才只有50分。但是是能感觉得到真题和库课的题目的难度差距的。库课属于是先给你做难一点的，以后碰到真题那个难度之后，就可以降维打击。但是这个方法对于我这种基础差的，似乎不太可行。之后转变学习方法。</p><p>第二轮复习，我转变成为刷桥哥的模拟题和看库课的视频。虽然宋浩是我的大学数学启蒙老师，但是真要说到提分，我还是得更加感谢桥哥和库课的视频。有一天我碰到了桥哥的这个公众号，发现桥哥给的模拟题和每日一题太对我胃口了，不至于难度升天，又可以每次都让我有所收获。然后就是进入到每天刷桥哥的模拟题和背公式。公式，公式，公式！公式真的特别重要，不要懒得背，前期的我就是懒得背公式，导致我每次做试卷的时候都要翻开公式册子去找公式。背公式也不是单纯地背，要结合刷题来背，效果事半功倍。</p><img src="https://s1.ax1x.com/2023/05/09/p9BPWMF.jpg" height="50%" width="50%" /><img src="https://s1.ax1x.com/2023/05/09/p9BP6P0.jpg" height="50%" width="50%" /><img src="https://s1.ax1x.com/2023/05/09/p9BPs5q.jpg" height="50%" width="50%" /><p>这一轮刷完，数学成绩就有了质的飞跃，可以直接提到七八十分，因为数学卷，基础分占大头，基础好了，难题也才能学会。所以题目要多做，我就是错了起码十遍，才记得不定积分+C。</p><p>接着第三轮就是翻错题，做错题，找问题。这一部分就是对前期学习的归纳总结，看看自己还有哪里没有掌握到位。</p><p>对于基础差的同学来说，多刷几遍桥哥的模拟题和往年真题，多背公式，把错题翻到烂，就已经够了。因为当你完成这个阶段的学习任务，你就能找到正确的学习方向了。还有一点，数学这种东西，每天都要学，只要有一段时间没看，就可以忘光的。</p><p>因此每天的9点半到11点就是我刷数学的时间（只给自己留一个半小时的原因：<br>1，养成只给自己留一个半小时做题的习惯，在考试的时候才有时间检查；<br>2，最重要的一点，11点过后陆续有大一大二的下课，我要赶在他们之前去干饭！）</p><p>旧题型一定要吃透，我在考前一个星期疯狂学习新题型，结果一直没考，不是说不重要，但是旧题型才是大头。至于新题型，如果时间不够的话，赌博性地选择一两个题型来吃透就好了，重点是吃透，不然泛泛而学，结果考到了，半懂半不懂的感觉才是最难受的。</p><h4 id="3-2-政治"><a href="#3-2-政治" class="headerlink" title="3.2 政治"></a><em>3.2 政治</em></h4><p>这是我最痛苦和最没有把握的一科，没有之一！对于政治，最重要的一点是背，然后是多背，最后是早背！</p><p>我的第一轮看了徐涛和库课的，基础就相当于过了一遍。（至少知道有这么个东西，然后是个什么东西）</p><p>接着就是疯狂背，由于我开始背的时间距离考试只有不到两个月时间，就只能捡重点背，看别人押题背。然后把xjp的经济、生态、法制、外交思想背了个遍。结果最后一个没考……拿到试卷的第一时间就是去找对应的大题，想着一响铃就直接默写上去。结果没找到，我就没心态了……不过好在其他的也有背，多少还是能写一些。</p><p>所以政治上，我给不了你们具体正确的方法，但是我能帮你们避雷掉一些错误的方法：<br>1，政治是一科很好拿分的，只要你多背多刷，就绝对可以领先别人。<br>2，同时这也是一科容易被低估的科目，所以一定要早背，提前一年就可以开始背了，背的越熟越好。因为政治是很难在短期内提很多分的，所以必须靠长期的积累。</p><p>由于我比较晚才开始背，所以我后面的每一天基本都会预留三到四个小时给政治背诵。千万不能想着背诵很简单，因为你需要不断地每一天去重复背，所以还是那一点：越早背越好。由于今年政治的题目，这里加多一点，不要相信所谓的押题，可以作为参考，但绝对不能拿它来保命，政治一定要广泛地背，在这本书里每一点都可能拿出来作为考点，不要放过每一个细节。这就是为什么前面强调，一定要早背，只有时间够才能够充分地背透这一本书。</p><h4 id="3-3-英语"><a href="#3-3-英语" class="headerlink" title="3.3 英语"></a><em>3.3 英语</em></h4><p>用英语我能给的建议也就只有多背单词多刷题了。不要小看每天背100个单词，日积月累，量变引起质变，不管什么英语考试四六级还是专插本还是高考，英语都是需要足够的单词量来支撑的，尤其是阅读。</p><img src="https://s1.ax1x.com/2023/05/09/p9BPran.jpg" height="50%" width="50%" /><p>英语和政治同理，必须得提前背，英语学习是一辈子的事，提前个两三年完全不早，因为你需要积累单词积累语法。背单词这件事前期很痛苦，但是一旦你坚持了一个月，你就会养成习惯了。我是习惯每天早上吃早餐的时候顺便打开扇贝单词背。单词量够了，应付这些比较中等的考试是绰绰有余的。我就在大专三年时间里过了英语A级、B级、四级、六级。</p><img src="https://s1.ax1x.com/2023/05/09/p9BPcGV.jpg" height="50%" width="50%" /><p>当你的单词量够了之后，做阅读才不会一脑子雾水。然后第二件重要的事，就是刷阅读，从简单的开始刷，每天刷个四天左右。刷了两个月就可以明显见效。因为英语阅读也是有套路的，做多了自然而然就大概懂得他的套路。</p><img src="https://s1.ax1x.com/2023/05/09/p9BPfr4.jpg" height="50%" width="50%" /><p><em>3.4  计算机基础与程序设计</em> </p><p>数据结构，我们之前学校有教，因此后面我就跟着B站上再过了一遍各种算法排序。至于C语言学校完全没有教，只能靠自学，然后我发现了尚硅谷的韩顺平老师，这里给大家强烈推荐一下 韩顺平的视频，首先是免费，其次他的视频，对于我们这些零基础的来说特别有用，而且他讲的比我们花了几千块的教育机构讲的还要好。我记得他本人也是清华大佬，能把这课程只通过线上的形式完全教会一个零基础小白，我觉得他的讲课能力还是非常厉害的。</p><p>接着就是刷题刷小红本。小红本的计算机题目还是非常有用的，多刷几遍，考试的难度也基本就这样了。想要拿高分的话，前面的基础题一定不要错太多，这是拿分的关键，然后把各种排序算法吃透，总之，如果说数学有主有次，可以重点掌握一些重点的知识，次要的可以稍微放一放，那计算机和政治一样，每一个细节都不能放过。</p><h3 id="4-升本后的感受和未来的打算"><a href="#4-升本后的感受和未来的打算" class="headerlink" title="4 . 升本后的感受和未来的打算"></a>4 . 升本后的感受和未来的打算</h3><p>怎么说呢？如果打算了专插本，那就请一定要做到最好。想一想，公办跟民办的学费差着几万块，如果真的上了公办那就可以省下一大笔钱，你可以用这笔钱去旅游，去学一门技术等等。切忌自我感动式的假学习，看似每天钻图书馆，结果都在发呆玩手机。</p><p>当成绩出来，谁是小丑，一目了然；当海水褪去，是谁在裸泳，一目了然……</p><p>至于我插完本之后，我应该还是会继续考研究生，人往高处走，水往低处流。下面也给学弟学妹几个建议：</p><p>1，结伴学习还是单独行动？<br>答：我个人的选择是单独行动，因为单独行动我拥有更高的自由行动的权利，不太需要考虑别人的感受，想吃饭就吃饭，想学习就学习，想去图书馆就去 可以精准的把握自己的学习进度和学习状态，单独行动的缺点就是偶尔会觉得孤独，但是人生的路又何尝不是孤独的呢，当你经历完了这个阶段你会发现那一段孤独的时光，反而是你收获最多，最值得回忆的时光。青春总是要奋斗的，不奋斗，这几年就过去了。</p><p>2，戒掉一切不健康的生活作息。保持规律的生活作息这点非常重要，你需要每天固定的时间段做固定的事情，这样久而久之你才能明确自己这个时间段应该做什么，不会无所适从。</p><p>3，如果下定决心要考一个好分数，个人建议不要谈恋爱，感情上的事情，会特别影响你的学习状态。（主观感受，每个人情况不同）</p><p>4，在图书馆学习的时候，可以每天早点去图书馆，每天固定抢同一个位置。当你在那个位置坐久了，你就会有归属感，每天也就更愿意去图书馆学习。</p><img src="https://s1.ax1x.com/2023/05/09/p9BP2xU.jpg" height="50%" width="50%" /><p>这是我的“固定位置”，在这里特别感谢一下它。</p><p>最后在这里希望学弟学妹们好好努力考一个好分数，毕竟现在越来越卷，尤其是计算机专业。公办的录取率不到1%，当你比别人更努力的时候，你才配获得更高的分数和更高的排名。最后送大家几张朋友圈背景和壁纸。</p><img src="https://s1.ax1x.com/2023/05/09/p9BiaJx.jpg" height="50%" width="50%" /><img src="https://s1.ax1x.com/2023/05/09/p9Bi0SK.jpg" height="50%" width="50%" /><img src="https://s1.ax1x.com/2023/05/09/p9BiUF1.jpg" height="50%" width="50%" /><img src="https://s1.ax1x.com/2023/05/09/p9BitoR.jpg" height="50%" width="50%" /><img src="https://s1.ax1x.com/2023/05/09/p9BiYw9.jpg" height="50%" width="50%" /><img src="https://s1.ax1x.com/2023/05/09/p9BidW6.jpg" height="50%" width="50%" /><img src="https://s1.ax1x.com/2023/05/09/p9BiBQO.jpg" height="50%" width="50%" />]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个提升生活幸福感的小技巧</title>
      <link href="/2023/05/07/%E5%87%A0%E4%B8%AA%E6%8F%90%E5%8D%87%E7%94%9F%E6%B4%BB%E5%B9%B8%E7%A6%8F%E6%84%9F%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2023/05/07/%E5%87%A0%E4%B8%AA%E6%8F%90%E5%8D%87%E7%94%9F%E6%B4%BB%E5%B9%B8%E7%A6%8F%E6%84%9F%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="几个可以提高生活幸福感的小技巧"><a href="#几个可以提高生活幸福感的小技巧" class="headerlink" title="几个可以提高生活幸福感的小技巧"></a>几个可以提高生活幸福感的小技巧</h2><ol><li><p>维持良好的睡眠质量。最好在睡前强制自己不要接触电子设备，睡前将手机放到自己不能一下子够到的地方。这样子一方面可以防止自己睡前看手机；另一方面可以防止第二天赖床。因为你必须得起床走两步才能拿到手机。</p></li><li><p>坚持每天通过手机相机记录生活。可能刚刚拍下的那一刻你并不会感到多么快乐或者幸福。但是当你一个月或者更久之后再来回看，就会发现当时的美好。</p></li><li><p>建立稳固的社交关系，不要滥交朋友。过多的关系其实是会消耗自己的。所以朋友在质不在量。如果有什么需要，家人永远是最牢固的依靠。</p></li><li><p>保证自己有至少一个健康的 <em>户外运动</em> 的爱好。比如打篮球、打羽毛球、跑步、骑车等，这些户外运动的爱好在你低谷的时候一定会对你有所帮助。</p></li><li><p>学会给自己定期的奖励和庆祝，如完成任务后吃个好吃的、购买自己喜欢的物品等等。可以定期给自己定一个阶段性的目标，如果自己完成了这个目标，就犒劳一下自己。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剪辑音效分享</title>
      <link href="/2023/05/07/%E5%89%AA%E8%BE%91%E9%9F%B3%E6%95%88%E5%88%86%E4%BA%AB/"/>
      <url>/2023/05/07/%E5%89%AA%E8%BE%91%E9%9F%B3%E6%95%88%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="昨天剪辑视频碰到一个很有用的音效分享网站，最主要的是它没有什么套路，也免费。可以直接下载mp3格式来进行使用。如果需求量不大的话，这个网站可以收藏一下："><a href="#昨天剪辑视频碰到一个很有用的音效分享网站，最主要的是它没有什么套路，也免费。可以直接下载mp3格式来进行使用。如果需求量不大的话，这个网站可以收藏一下：" class="headerlink" title="昨天剪辑视频碰到一个很有用的音效分享网站，最主要的是它没有什么套路，也免费。可以直接下载mp3格式来进行使用。如果需求量不大的话，这个网站可以收藏一下："></a>昨天剪辑视频碰到一个很有用的音效分享网站，最主要的是它没有什么套路，也免费。可以直接下载mp3格式来进行使用。如果需求量不大的话，这个网站可以收藏一下：</h4><h4 id="https-taira-komori-jpn-org-freesoundtw-html"><a href="#https-taira-komori-jpn-org-freesoundtw-html" class="headerlink" title="https://taira-komori.jpn.org/freesoundtw.html"></a><a href="https://taira-komori.jpn.org/freesoundtw.html">https://taira-komori.jpn.org/freesoundtw.html</a></h4>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剪辑 </tag>
            
            <tag> bgm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我为什么创建这个博客？</title>
      <link href="/2023/04/20/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/04/20/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="For-Test"><a href="#For-Test" class="headerlink" title="For Test"></a>For Test</h1><h2 id="Why-I-sign-up-the-blog"><a href="#Why-I-sign-up-the-blog" class="headerlink" title="Why I sign up the blog ?"></a>Why I sign up the blog ?</h2><p>事实上，创建博客的初衷起于高中。当时我对科技特别感兴趣，当我看到别人有自己的公众号、网站、博客的时候，我也特别想拥有一个属于自己的公众发布平台。</p><p>因此，我就特地注册了微信公众号，还不止注册了一次。但是当我注册完后，新的问题又来了：怎么运营这个公众号？</p><p>当时的我并没有放太多心思在这上面，因此也就草草发了几篇文章和自己的摄影作品上去，之后就再没有去关注过了。</p><p>到了大学的时候，我学习了网页设计的相关知识，因此心里的那颗种子就愈发想发芽，但是奈何我并没有拥有太多相关知识(上课经常摸鱼)，有心无力。</p><p>等到前段时间，我实在是忍不住了，再难也要试一下。我就根据网上的教程，学习了如何利用GitHub和hexo框架来搭建属于自己的博客。</p><p>经过万般艰辛，终于……你们就看到了现在的页面。</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础知识_第一章</title>
      <link href="/2022/11/09/C%E8%AF%AD%E8%A8%80%E6%80%BB%E7%BB%93/"/>
      <url>/2022/11/09/C%E8%AF%AD%E8%A8%80%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[TOC]</p><hr><blockquote><p>参考b站尚硅谷的c语言教程所制作！！！</p></blockquote><h3 id="基本知识点："><a href="#基本知识点：" class="headerlink" title="基本知识点："></a>基本知识点：</h3><ul><li><p>计算机的单位：bit；byte；kb；mb；gb；tb；pb</p></li><li><p>8 bit （比特位） = 1 byte （字节） ；</p></li><li><p>常用转义字符：</p><ul><li>\t : 一个制表位，实现对齐的功能</li><li>\n : 换行符</li><li>\ : 一个\</li><li>&quot; : 一个”</li><li>&#39; : 一个’</li><li>\ : 反斜杠</li><li>\r : 一个回车 printf (“Lowry is \r smart”)</li><li>\r不是换行，是回车。例子：printf(“勇士总冠军\r库里”)<ul><li>第一步：    输出：勇士总冠军</li><li>第二步：    回车，相当于重新定位光标，定位到最前面，然后把后面的内容替换成前面的内容</li><li>第三步：    输出： 库里总冠军</li></ul></li></ul></li><li><p>编译： 有了c源文件，通过编译器将其编译成obj文件（目标文件），如果程序没有错误，没有任何提示，但会在debug目录下出现一个.obj文件，该文件为目标文件。</p></li><li><p>链接： 有了目标文件(.obj文件)，通过链接程序将其和运行需要的c库文件链接成exe文件（可执行文件）。如果程序没有错误，没有任何提示，但会在debug目录下出现一个.exe文件，该文件为可执行文件。</p></li><li><p>为什么需要链接库文件？因为我们在编写c程序的时候除了自己的代码，还会用到c程序库里的内容。比如&lt;stdio.h&gt;&lt;stdlib.h&gt;中的printf()system()等等…这些函数不是程序员自己写的，而是c程序库中提供的，因此需要和库文件进行链接。</p></li><li><p>并且你会发现链接后，生成的.exe文件，比obj文件大了很多。</p></li><li><p>单行注释：//             多行注释：/**/</p></li><li><p>tab键：向右移动一个制表位;    shitft+tab:向左移动一个制表位</p><hr></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量：声明变量：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">1</span>  <span class="comment">//整型</span></span><br><span class="line"> <span class="type">double</span> score = <span class="number">2.3</span>    <span class="comment">//小数</span></span><br><span class="line"> <span class="type">char</span> gender = <span class="string">&#x27;A&#x27;</span>    <span class="comment">//字符</span></span><br><span class="line"> <span class="type">char</span> name[]  = <span class="string">&quot;勇士总冠军&quot;</span>    <span class="comment">//字符串</span></span><br><span class="line"> <span class="type">long</span> num1 = <span class="number">123456</span>；<span class="comment">//如果输出的是long，则用 %ld 输出</span></span><br><span class="line"> <span class="type">long</span> <span class="type">long</span> num2 = <span class="number">12345678</span>；  <span class="comment">//如果输出的是long long ，则用 %lld 输出</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num=%d score=%.2f gender=%c name=%s&quot;</span>,num,score,gender,name)</span><br></pre></td></tr></table></figure><p>1.如果输出的是整数：%d</p><p>2.如果输出的是小数：%f，如果希望保留小数点%.2f（意思保留两位小数点）</p><p>3.如果输出的是字符：%c</p><p>4.如果输出的是字符串：%s（c语言里没有字符串，用字符数组表示）</p><ul><li><p>变量表示内存中的一个存储区域（不同的数据类型，占用的空间大小不一样）</p></li><li><p>该区域有自己的名称和类型</p></li><li><p>变量必须先声明，后使用</p></li><li><p>该区域的数据可以在同一类型范围内不断变化</p></li><li><p>变量在同一个作用域内不能重名</p></li><li><p>变量三要素(变量名+值+数据类型)</p><hr></li></ul><h3 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h3><h4 id="C数据类型"><a href="#C数据类型" class="headerlink" title="C数据类型"></a>C数据类型</h4><ul><li><p>基本类型</p><ul><li>数值类型<ul><li>整型<ul><li>短整型 short</li><li>整型 int </li><li>长整型 long</li></ul></li><li>浮点型<ul><li>单精度型 float</li><li>双精度型 double</li></ul></li></ul></li><li>字符类型 char </li></ul></li><li><p>构造类型</p><ul><li>数组</li><li>结构体 struct</li><li>共用体 union</li><li>枚举类型 enum</li></ul></li><li><p>指针类型</p></li><li><p>空类型void</p><hr></li><li><p>每一种数据都定义了明确的数据类型，在内存里分配不同大小的内存空间</p></li><li><p>在c中，没有字符串类型，使用祖父数组表示字符串</p></li><li><p>在不同系统中，部分数据类型字节长度不一样</p><table><thead><tr><th>类型</th><th>存储大小</th></tr></thead><tbody><tr><td>char</td><td>1字节</td></tr><tr><td>unsigned char</td><td>1字节</td></tr><tr><td>signed char</td><td>1字节</td></tr><tr><td>int</td><td>2或4字节</td></tr><tr><td>unsigned char</td><td>2或4字节</td></tr><tr><td>short</td><td>2字节</td></tr><tr><td>unsigned short</td><td>2字节</td></tr><tr><td>long</td><td>4字节</td></tr><tr><td>unsigned long</td><td>4字节</td></tr></tbody></table><hr><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3></li><li><p>浮点型常量默认为double型，声明float型常量时，必须在后面加’f’或’F’</p></li><li><p>浮点型常量有两种表现形式：</p><ul><li>十进制数形式：如：5.12、512.0f、.512（必须有小数点）</li><li>科学计数法： 如：5.12e2（e2表示乘以10^2，即小数点向右移两位）、512E-2</li></ul></li><li><p>通常情况下，应该使用double型，因为他比float更精准</p><ul><li>printf(“d1=%f”,d1);    //在输出时，默认保留小数点6位</li></ul></li></ul><hr><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><ul><li><p>字符常量是用单引号括起来的字符。如：char c1 = ‘a’;</p></li><li><p>c中还允许使用转义字符’&#39;来将其后的字符转变为特殊字符常量。如：char c2 = ‘\n’    //  \n表示换行</p></li><li><p>在C中，char的本质是一个整数，在输出时，是ASCII码对应的字符</p></li><li><p>可以直接给char赋一个整数，然后在输出时，会按照对应的ASCII字符输出。如：char c3 = 97</p></li><li><p>char类型是可以进行运算的，相当于ASCII码对应的整数。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;<span class="comment">//&#x27;a&#x27;对应的ASCII为97</span></span><br><span class="line"><span class="type">int</span> num1 = c1 +<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> c2 = <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num1=%d c2=%c &quot;</span>,num1,c2)<span class="comment">//num1=107 c2=98</span></span><br></pre></td></tr></table></figure><hr><h3 id="字符类型本质探讨"><a href="#字符类型本质探讨" class="headerlink" title="字符类型本质探讨"></a>字符类型本质探讨</h3><ul><li>字符型存储到计算机的过程：将字符对应的ASCII码找出来 —— 转换成二进制 —— 存储</li><li>存储：字符’a’ —— 码值（97） —— 二进制（1100001） —— 存储</li><li>读取：二进制（1100001） —— 码值（97） ——  字符’a’ ——  显示</li><li>字符和码值的对应关系是通过字符编码表决定好的（世界统一的）</li></ul><hr><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul><li>C语言标准（C89）没有定义布尔类型，所以C语言判断真假时，以以0为假，非0为真</li><li>这种做法不直观，所以我们可以借助C语言的宏定义。</li><li>C语言标准(C99)提供了_Bool型，_Bool仍是整数类型，但与一般整型不同的是<br>_Bool变量只能赋值为0或1，非0的值都会被存储为1，C99还提供了一个头文件<br> &lt;stdbool.h&gt; 定义了 bool 代表_Bool , true代表1 ，false代表0。只要导入 stdbool.h，就<br>能方便的操作布尔类型了，比如 bool flag = false</li></ul><hr><h3 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h3><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><ul><li>当C程序在进行 <em>赋值</em> 或者 <em>转换</em>时，精度小的类型 <em>自动转换</em> 成 <em>精度大的</em> 数据类型，这个就是自动类型转换。</li><li>数据类型按精度（容量）大小排序：<ul><li>short - int - unsigned int - long - unsigned long - float - double - long double </li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">float</span> num = str;<span class="comment">//从低精度char自动转换成高精度float</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, num);<span class="comment">//97.000000</span></span><br></pre></td></tr></table></figure><hr><p>自动类型转换细节说明：</p><ul><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成精度最大的那种数据类型<br>然后再进行计算(如int型和short型运算时，先把short转成int型后再进行运算)。</li><li>若两种类型的字节数不同，转换成字节数大的类型，若两种类型的字节数相同，且一种有符号，一种无符号，则转换成无符号类型</li><li>在赋值运算中，赋值号两边量的数据类型不同时，赋值号右边量的类型将转换为左边量的类型，如果石边变量的数据类型长度比左边长时，将去失一部分数据，这样会降低精度，去失的部分按四舍五入向前舍入</li></ul><hr><p>[^分割线更新时间]: 2022年11月9日 20:20</p><hr><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul><li>将精度高的数据类型转换为精度小的数据类型。使用时要加上强制转换符()，但可能造成精度<br>降低或溢出,格外要汪意。</li><li>强制类型转换一般格式如：（类型名）表达式，这种强制类型转换操作并不改变操作数本身</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">double</span> d = <span class="number">156.99</span>;<span class="comment">//转换后d任然是double类型</span></span><br><span class="line">    <span class="type">int</span> num = (<span class="type">int</span>)d;<span class="comment">//这里不是四舍五入，而是直接截断小数点后面的部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>当进行数据的从 精度高 一&gt; 精度低，就需要使用到强制转换</p></li><li><p><strong>强转符号只针对于最近的操作数有效</strong>,往往会使用小括号提升优先级</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = (<span class="type">int</span>)<span class="number">2.4</span>*<span class="number">12</span>;<span class="comment">//24</span></span><br><span class="line"><span class="type">int</span> c = (<span class="type">int</span>)(<span class="number">2.4</span>*<span class="number">12</span>);<span class="comment">//28</span></span><br></pre></td></tr></table></figure><hr><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ul><li>简单来说，指针表示一个地址</li><li>&amp;表示取地址</li></ul><p><a href="https://imgse.com/i/zC4fKJ"><img src="https://s1.ax1x.com/2022/11/11/zC4fKJ.jpg" alt="zC4fKJ.jpg"></a></p><hr><p>[^分割线更新时间]: 2022年11月11日 18：47</p><hr><ul><li>C语言传递参数(或者赋值)可以是值传递，也可以传递指针，传递指针也叫地址传递。</li><li>默认传递值的类型：基本数据类型(整型类型、小数类型，字符类型)，结构体共用体</li><li>默认传递地址的类似：指针、数组</li><li>常量是固定值，在程序执行期间不能改变。这些固定的值，又叫做字面量</li><li>常量可以是任何的基本数据类型，比如整数常量、浮点常量、字符常量，或字符串字面值，也有枚举常量。</li><li>常量的值在定义后不能进行修改</li></ul><h3 id="整数常量"><a href="#整数常量" class="headerlink" title="整数常量"></a>整数常量</h3><ul><li>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或0X表示十六进制，0表示八进制，不带前缀则默认表示十进制。</li><li>整数常量也可以带一个后缀，后缀是U和L的组合，U表示无符号整数（unsigned），L表示长整数（long）。</li><li>后缀可以是大写，也可以是小写，U和L的顺序任意</li></ul><table><thead><tr><th align="center">14</th><th align="center">十进制</th></tr></thead><tbody><tr><td align="center">0414</td><td align="center">八进制</td></tr><tr><td align="center">0x4b</td><td align="center">十六进制</td></tr><tr><td align="center">30</td><td align="center">整数</td></tr><tr><td align="center">30u</td><td align="center">无符号整数</td></tr><tr><td align="center">30l</td><td align="center">长整数</td></tr><tr><td align="center">30ul</td><td align="center">无符号长整数</td></tr></tbody></table><h3 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h3><ul><li>两种方式：使用#define预处理器、使用const关键字</li><li>#define 预处理器定义常量的形式： #define 常量名 常量值（可以不用加分号）例：#define A 1</li><li>const关键字定义常量的形式： const 数据类型 常量名 = 常量值；（要加分号，因为这是个语句）例：const int A = 3;</li></ul><h4 id="const-和-define的区别"><a href="#const-和-define的区别" class="headerlink" title="const 和 #define的区别"></a>const 和 #define的区别</h4><ol><li>const定义的常量时，带类型，define不带类型</li><li>const是在编译、运行的时候起作用，而define是在编译的预处理阶段起作用</li><li>define只是简单的替换，没有类型检查。简单的字符串替换会导致边界效应。</li><li>const常量可以进行调试的，define是不能进行调试的，主要是预编译阶段就已经替换掉了，调试的时候就没它了</li><li>const不能重定义，不可以定义两个一样的，而define通过undef取消某个符号的定义再重新定义</li><li>define可以配合#ifdef、#ifndef、#endif 来使用，可以让代码更加灵活，比如我们可以通过#define 来启动或者关闭调试信。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> A 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B A+3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C A/B*3</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span> <span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c= %d&quot;</span>,C);</span><br><span class="line">    <span class="comment">//分析：#define 只是做一个单纯的替换</span></span><br><span class="line">    <span class="comment">// C = A/A+3*3 = 1/1+3*3 = 1+9 = 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符介绍"><a href="#运算符介绍" class="headerlink" title="运算符介绍"></a>运算符介绍</h3><ul><li>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等<ol><li>算术运算符（ + , - , * , / , % )</li><li>赋值运算符（ =  +=  -=  …）</li><li>关系运算符（比较运算符）（比如&gt; 、&gt;=、&lt; 、&lt;=、==等等)</li><li>逻辑运算符（&amp;&amp;逻辑与、 || 逻辑或 、!逻辑非)</li><li>位运算符(&amp;按位与 、|按位或 、^按位异或 、～按位取反等等）</li><li>三元运算符（表达式？表达1:表达2)</li><li>算术运算符：常用的+，-，*，/。还有一些需要注意的，如下表：</li></ol></li></ul><table><thead><tr><th>运算符</th><th>运算</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>b=4;-b</td><td>-4</td></tr><tr><td>%</td><td>取模（取余）</td><td>7%5</td><td>2</td></tr><tr><td>++</br>++</td><td>先运算再取值</br>先取值再运算</td><td>a=2;b=++a</br>a=2;b=a++</td><td>a=3;b=3</br>a=3;b=2</td></tr><tr><td>–</br>–</td><td>先运算再取值</br>先取值再运算</td><td>a=2;b=–a</br>a=2;b=a–</td><td>a=1;b=1</br>a=1;b=a</td></tr></tbody></table><h4 id="算术运算细节说明"><a href="#算术运算细节说明" class="headerlink" title="算术运算细节说明"></a>算术运算细节说明</h4><ol><li>对于除号“/“，它的整数除和小数出是有区别的，整数之间做除法时，只保留整数部分而直接舍去小数部分。例：10/4 = 2</li><li>当自增当做一个独立语言使用时，不管是++i；还是i++；都是一样的，等价</li></ol><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><ol><li>结合的方向只有三个是从右向左，其余都是从左向右</li><li>所有的双目运算符中只有赋值运算符的结合方向是从右向左</li><li>另外两个从右向左的结合运算符，一个是单目运算，还有一个是三目运算</li><li>逗号的运算符优先级最低</li><li>说一下优先级的大概的顺序：算术运算符&gt;关系运算符&gt;逻辑运算符(逻辑非！除外)&gt;赋值运算符&gt;逗号运算符</li><li>注意不需要刻意的记,常用就慢慢有印象</li></ol><h4 id="关系运算符（比较运算符）"><a href="#关系运算符（比较运算符）" class="headerlink" title="关系运算符（比较运算符）"></a>关系运算符（比较运算符）</h4><ul><li>关系运算符的结果要么是真（非0表示），要么是假（0表示）</li><li>关系表达式常用于if结构的条件中或循环结构的条件中</li></ul><table><thead><tr><th>运算符</th><th>运算</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4==3</td><td>false</td></tr><tr><td>!=</td><td>不等于</td><td>4!=3</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>4&lt;3</td><td>false</td></tr><tr><td>&gt;</td><td>大于</td><td>4&gt;3</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4&lt;=3</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4&gt;=3</td><td>true</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>例子</br>假设：a=1;b=0</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。如果两个操作都非零(真）则条件为真，否则结果为0(假)</td><td>(a&amp;&amp;b)为假</td></tr><tr><td>||</td><td>称为逻辑或运算符。如果有任意一个操作为真，则条件为真</td><td>（a||b)为真</td></tr><tr><td>!</td><td>称为逻辑非运算符。用来逆转操作数的逻辑状态。</td><td>!(a&amp;&amp;b)为真</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a= <span class="number">10</span>,b= <span class="number">99</span>;</span><br><span class="line"><span class="comment">//说明:</span></span><br><span class="line"><span class="comment">//1. 在进行&amp;&amp; 操作时,如果第一个条件为 false,则后面的条件不再判断</span></span><br><span class="line"><span class="comment">//2.该现象称为短路现象，所以逻辑与也称为短路逻辑与</span></span><br><span class="line"><span class="keyword">if</span>(a &lt;<span class="number">2</span> &amp;&amp; ++b&gt;<span class="number">99</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ok100&quot;</span>):</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b= %d&quot;</span>, b); <span class="comment">//b=99</span></span><br></pre></td></tr></table></figure><h5 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">short</span> z = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">if</span>((z++ == <span class="number">42</span>)&amp;&amp;(y=<span class="number">1</span>))&#123;<span class="comment">//z=43,y=1</span></span><br><span class="line">        z++;   <span class="comment">//z=44</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((x=<span class="number">0</span>)||(++z==<span class="number">45</span>)&#123;<span class="comment">//x=0;z=45</span></span><br><span class="line">        z++;   <span class="comment">//z=46</span></span><br><span class="line">    &#125;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;z=%d&quot;</span>,z);</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">/*一定要分清=和==的区别！！！</span></span><br><span class="line"><span class="comment">       =是赋值，==是比较是否相等</span></span><br><span class="line"><span class="comment">       */</span></span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li>就是将某个运算后的值，赋给指定的变量。</li><li>赋值运算符有：=，+=，-=，*=，/=，%=<ul><li>例子：c += a;相当于c= c+a; 其他以此类推。</li></ul></li><li>位运算符：&lt;&lt;=, &gt;&gt;=, &amp;=, ^=, |=</li></ul><table><thead><tr><th>&lt;&lt;=</th><th>左移且赋值运算符</th><th>C &lt;&lt;=2 等同于 C=C&lt;&lt; 2</th></tr></thead><tbody><tr><td>&gt;&gt;=</td><td>右移且赋值运算符</td><td>C &gt;&gt;=2 等同于 C=C&gt;&gt; 2</td></tr><tr><td>&amp;=</td><td>按位与且赋值运算符</td><td>c &amp;=2 等同于 c=c&amp;2</td></tr><tr><td>^=</td><td>按位异或且赋值运算符</td><td>c^=2 等同于 c= c^2</td></tr><tr><td>|=</td><td>按位或且赋值运算符</td><td>c |= 2 等同于 c= c|2</td></tr></tbody></table><h3 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h3><ul><li>在编程中、需要接收用户输入的数据，就可以使用键盘输入语句来获取。lnputDemo.c</li><li>步骤:<ol><li>include &lt;stdio.h&gt;</li><li>使用scanf 函数</li><li>使用适当的格式参数接收输入</li></ol></li></ul><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><ul><li>对于整数，有四种表示方式<ol><li>二进制:0,1，满2进1，C语言中没有二进制常数的表示方法</li><li>八进制:0-7，满8进1。以数字0开头表示。</li><li>十进制:0-9，满10进1</li><li>十六进制：0-9及A-F，满16进1，以 <em>0x或0X</em> 开头表示。此处的A-F不区分大小写。如:0x21AF +1= 0X21B0</li></ol></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num1 = <span class="number">210</span>;<span class="comment">//十进制，没有前缀</span></span><br><span class="line"><span class="type">int</span> num2 = <span class="number">0210</span>;<span class="comment">//八进制，以0开头</span></span><br><span class="line"><span class="type">int</span> num3 = <span class="number">0x1210</span>;<span class="comment">//十六进制，以0x开头</span></span><br></pre></td></tr></table></figure><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><ol><li><em><strong>二进制</strong></em> 转换成 <em><strong>十进制</strong></em>示例：<ol><li>规则：从最低位开始，将每个位上的数提取出来，乘以2的(位数-1)次方，然后求和。</li><li>案例：请将二进制1011转成十进制的数</li></ol></li><li><em><strong>八进制</strong></em> 转换成 <em><strong>十进制</strong></em>示例<ol><li>规则：从最低位开始，将每个位上的数提取出来，乘以8的(位数-1)次方，然后求和。</li><li>案例：请将0123转成十进制的数</li></ol></li><li><em><strong>十六进制</strong></em> 转换成 <em><strong>十进制</strong></em>示例<ol><li>规则：从最低位开始，将每个位上的数提取出来，乘以16的(位数-1)次方，然后求和。</li><li>案例：请将0x34A转成十进制的数</li></ol></li><li>**<em>十进制</em> **转 <em><strong>二进制</strong></em><ol><li>规则：将该数不断除以2，直到商为0为止，然后将每步得到的余数倒过来，就是对应的二进制</li><li><a href="https://imgse.com/i/zFzOud"><img src="https://s1.ax1x.com/2022/11/13/zFzOud.jpg" alt="zFzOud.jpg"></a></li></ol></li><li><em><strong>十讲制</strong></em> 转换成 <em><strong>八进制</strong></em>，规则：将该数不断除以8，直到商为0为止，然后将每步得到的余数倒过来，就是对应的八进制。</li><li><em><strong>十进制</strong></em> 转换成 <em><strong>十六进制</strong></em>，规则：将该数不断除以16，直到商为0为止，然后将每步得到的余数倒过来，就是对应的十六进制。</li><li><em><strong>二进制</strong></em> 转换成 <em><strong>八进制</strong></em>，规则：从低位开始,将二进制数每三位一组，转成对应的八进制数即可。<br>案例：请将11010101转成八进制：*<u>11</u>* <em><u>010</u></em> <em><u>101</u></em>=&gt; 0325</li><li><em><strong>二进制</strong></em> 转换成 <em><strong>十六进制</strong></em>，规则：低位开始，将二进制数每四位一组，转成对应的十六进制数即可。 =&gt; 案例：请将11010101转成十六进制 : <em><u>1101</u></em> <em><u>0101</u></em> = 0xD5</li><li><em><strong>八进制</strong></em> 转换成 <em><strong>二进制</strong></em>,规则：将八进制数每1位,转成对应的一个3位的二进制数即可。</li><li><em><strong>十六进制</strong></em> 转换成 <em><strong>二进制</strong></em>, 规则：将十六进制数每1位,转成对应的4位的一个二进制数即可。</li></ol><h3 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h3><ul><li>对于有符号的而言:<ol><li><p>二进制的最高位是符号位:0表示正数,1表示负数</p></li><li><p>正数的原码，反码，补码都一样（三码合一）</p></li><li><p>负数的反码=它的原码符号位不变，其它位取反(0-&gt;1,1-&gt;0）</p></li><li><p>负数的补码=它的反码+1</p></li><li><p>0的反码，补码都是0</p></li><li><p>在计算机运算的时候，都是以补码的方式来运算的</p></li></ol></li></ul><h3 id="位运算符-重点难点"><a href="#位运算符-重点难点" class="headerlink" title="位运算符 _ (  重点难点  )"></a>位运算符 _ (  <em>重点难点</em>  )</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与操作，按二进制进行“与”运算。</br>运算规则：0&amp;0=0；0&amp;1=0;1&amp;0=01&amp;1=1；</td></tr><tr><td>|</td><td>按位或操作，按二进制进行“或”运算。</br>运算规则：0|1=1；0|0=0；1|1=1；1|0=1；</td></tr><tr><td>^</td><td>异或运算符，按二进制进行“异或”运算。</br>运算规则：0^0=0;1^1=0; 1^0=1;0^1=1;</td></tr><tr><td>~</td><td>取反运算符，按二进制位进行“取反”运算。</br>运算规则：~1=0; ~0=1;</td></tr><tr><td>&lt;&lt;</td><td>二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0 )</td></tr><tr><td>&gt;&gt;</td><td>二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负效左补1，右边丢弃。（说白了就是补符号位）</td></tr></tbody></table><ul><li>算术左移：符号位不变，低位补0</li><li>算术右移：低位溢出,符号位不变,并用符号位补溢出的高位</li></ul><h5 id="练习：-1"><a href="#练习：-1" class="headerlink" title="练习："></a>练习：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>&gt;&gt;<span class="number">2</span>;<span class="comment">//a?</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">-1</span>&gt;&gt;<span class="number">2</span>;<span class="comment">//b?</span></span><br><span class="line"><span class="type">int</span> c = <span class="number">1</span>&lt;&lt;<span class="number">2</span>;<span class="comment">//c?</span></span><br></pre></td></tr></table></figure><hr><h3 id="程序流程控制介绍"><a href="#程序流程控制介绍" class="headerlink" title="程序流程控制介绍"></a>程序流程控制介绍</h3><ul><li>在程序中，程序运行的流程控制决定程序是如何执行的，是我们必须掌握的主要有三大流程控制语句<ol><li>顺序控制</li><li>分支控制</li><li>循环控制</li></ol></li></ul><ol><li><p>顺序控制介绍：程序从上到下逐行的执行，中间没有任何判断和跳转。</p></li><li><p>分支控制if-else：</p><ol><li>单分支_if(){}</li><li>双分支_if(){}else{}</li><li>多分支_if()else if(){}else{}</li></ol></li><li><p>switch分支结构：</p><ol><li>switch细节讨论<ol><li>switch语句中的 expression是一个常量表达式，必须是一个整型(char、short, int, long等）或枚举类型</li><li>case子句中的值必须是常量,而不能是变量</li><li>default子句是可选的，当没有匹配的case时，执行default</li><li> break语句用来在执行完一个case分支后使程序跳出switch语句块</li><li>如果没有写break，会执行下一个case 语句块，直到遇到break或者执行到switch结尾，这个现象称为穿透。</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>：<span class="comment">//当表达式值等于常量1时，执行语句块1</span></span><br><span class="line">        语句块<span class="number">1</span>；</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//退出switch</span></span><br><span class="line">     <span class="keyword">case</span> 常量<span class="number">2</span>：</span><br><span class="line">         语句块<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//如果没有break，就继续往下执行，直到遇到break退出</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">default</span>语句块;<span class="comment">//当以上情况都不存在时，执行default语句块</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch和if的比较：</p><ol><li>如果判断的具体数值不多，而且符合整型、枚举类型。虽然两种语句都可以，但是还是建议使用switch语句。</li><li>其他情况，对区间判断，对结果为真假的判断，使用if，if的使用范围更广。</li></ol></li><li><p>for循环控制：</p><ol><li>循环条件是返回一个表示真(非0)假(0）的表达式</li><li>for(;循环判断条件;）中的初始化和变量迭代可以不写（写到其它地方），但是两边的分号不能省略。</li><li>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开。例子：for(i = 0,j= 0;j&lt; count; i++,j+= 2）</li></ol></li><li><p>while循环控制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;<span class="comment">//循环变量初始化;</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">3</span>)&#123;<span class="comment">//循环条件</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;halo&quot;</span>);<span class="comment">//循环体;</span></span><br><span class="line">    i++;<span class="comment">//循环变量迭代;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do…while循环控制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;<span class="comment">//循环变量初始化</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;halo&quot;</span>);<span class="comment">//循环体(多条语句)</span></span><br><span class="line">        i++;<span class="comment">//循环变量迭代</span></span><br><span class="line">    &#125;<span class="keyword">while</span>(i&lt;<span class="number">5</span>);<span class="comment">//循环条件</span></span><br></pre></td></tr></table></figure></li><li><p>多重循环控制：</p><ol><li>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for,while,do…while均可以作为外层循环和内层循环。建议一般使用两层，最多不要超过三层，太多了自己都看不懂。</li><li>实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为false时，才会完全跳出内层循坏，才可结束外层的当次循环，开始下一次的循环。</li><li>设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n=mn次</li></ol></li><li><p>跳转控制语句：</p><ol><li><p>break语句用于终止某个语句块的执行，一般使用在switch或者循环（三大循环中），可以理解为跳出此次循环，不继续执行。</p></li><li><p>continue语句用于结束本次循环，继续执行下一次循环。continue语句只能配合循环语句使用，不能单独和switch/if使用。</p></li><li><p>goto语句可以无条件的转移到程序中指定的行。在c程序设计中一般不主张使用goto语句，以免造成程序的混乱，使理解和调试程序都产生困难。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">goto</span> label;<span class="comment">//label名字自己取</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">lable:statement <span class="comment">//直接跳转到指定的这里，执行这里的语句块</span></span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 编程 </tag>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
