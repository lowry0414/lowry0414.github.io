<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lowry</title>
  
  
  <link href="http://lowry0414.github.io/atom.xml" rel="self"/>
  
  <link href="http://lowry0414.github.io/"/>
  <updated>2023-05-07T11:32:21.332Z</updated>
  <id>http://lowry0414.github.io/</id>
  
  <author>
    <name>Lowry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>几个提升生活幸福感的小技巧</title>
    <link href="http://lowry0414.github.io/2023/05/07/%E5%87%A0%E4%B8%AA%E6%8F%90%E5%8D%87%E7%94%9F%E6%B4%BB%E5%B9%B8%E7%A6%8F%E6%84%9F%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://lowry0414.github.io/2023/05/07/%E5%87%A0%E4%B8%AA%E6%8F%90%E5%8D%87%E7%94%9F%E6%B4%BB%E5%B9%B8%E7%A6%8F%E6%84%9F%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2023-05-07T11:19:01.000Z</published>
    <updated>2023-05-07T11:32:21.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="几个可以提高生活幸福感的小技巧"><a href="#几个可以提高生活幸福感的小技巧" class="headerlink" title="几个可以提高生活幸福感的小技巧"></a>几个可以提高生活幸福感的小技巧</h2><ol><li><p>维持良好的睡眠质量。最好在睡前强制自己不要接触电子设备，睡前将手机放到自己不能一下子够到的地方。这样子一方面可以防止自己睡前看手机；另一方面可以防止第二天赖床。因为你必须得起床走两步才能拿到手机。</p></li><li><p>坚持每天通过手机相机记录生活。可能刚刚拍下的那一刻你并不会感到多么快乐或者幸福。但是当你一个月或者更久之后再来回看，就会发现当时的美好。</p></li><li><p>建立稳固的社交关系，不要滥交朋友。过多的关系其实是会消耗自己的。所以朋友在质不在量。如果有什么需要，家人永远是最牢固的依靠。</p></li><li><p>保证自己有至少一个健康的 <em>户外运动</em> 的爱好。比如打篮球、打羽毛球、跑步、骑车等，这些户外运动的爱好在你低谷的时候一定会对你有所帮助。</p></li><li><p>学会给自己定期的奖励和庆祝，如完成任务后吃个好吃的、购买自己喜欢的物品等等。可以定期给自己定一个阶段性的目标，如果自己完成了这个目标，就犒劳一下自己。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;几个可以提高生活幸福感的小技巧&quot;&gt;&lt;a href=&quot;#几个可以提高生活幸福感的小技巧&quot; class=&quot;headerlink&quot; title=&quot;几个可以提高生活幸福感的小技巧&quot;&gt;&lt;/a&gt;几个可以提高生活幸福感的小技巧&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;维持良好的睡眠质量</summary>
      
    
    
    
    
    <category term="技巧" scheme="http://lowry0414.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="生活" scheme="http://lowry0414.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>剪辑音效分享</title>
    <link href="http://lowry0414.github.io/2023/05/07/%E5%89%AA%E8%BE%91%E9%9F%B3%E6%95%88%E5%88%86%E4%BA%AB/"/>
    <id>http://lowry0414.github.io/2023/05/07/%E5%89%AA%E8%BE%91%E9%9F%B3%E6%95%88%E5%88%86%E4%BA%AB/</id>
    <published>2023-05-07T07:21:37.000Z</published>
    <updated>2023-05-07T07:35:57.933Z</updated>
    
    <content type="html"><![CDATA[<h4 id="昨天剪辑视频碰到一个很有用的音效分享网站，最主要的是它没有什么套路，也免费。可以直接下载mp3格式来进行使用。如果需求量不大的话，这个网站可以收藏一下："><a href="#昨天剪辑视频碰到一个很有用的音效分享网站，最主要的是它没有什么套路，也免费。可以直接下载mp3格式来进行使用。如果需求量不大的话，这个网站可以收藏一下：" class="headerlink" title="昨天剪辑视频碰到一个很有用的音效分享网站，最主要的是它没有什么套路，也免费。可以直接下载mp3格式来进行使用。如果需求量不大的话，这个网站可以收藏一下："></a>昨天剪辑视频碰到一个很有用的音效分享网站，最主要的是它没有什么套路，也免费。可以直接下载mp3格式来进行使用。如果需求量不大的话，这个网站可以收藏一下：</h4><h4 id="https-taira-komori-jpn-org-freesoundtw-html"><a href="#https-taira-komori-jpn-org-freesoundtw-html" class="headerlink" title="https://taira-komori.jpn.org/freesoundtw.html"></a><a href="https://taira-komori.jpn.org/freesoundtw.html">https://taira-komori.jpn.org/freesoundtw.html</a></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;昨天剪辑视频碰到一个很有用的音效分享网站，最主要的是它没有什么套路，也免费。可以直接下载mp3格式来进行使用。如果需求量不大的话，这个网站可以收藏一下：&quot;&gt;&lt;a href=&quot;#昨天剪辑视频碰到一个很有用的音效分享网站，最主要的是它没有什么套路，也免费。可以直接下载</summary>
      
    
    
    
    
    <category term="剪辑" scheme="http://lowry0414.github.io/tags/%E5%89%AA%E8%BE%91/"/>
    
    <category term="bgm" scheme="http://lowry0414.github.io/tags/bgm/"/>
    
  </entry>
  
  <entry>
    <title>why i sign up the blog?</title>
    <link href="http://lowry0414.github.io/2023/04/20/post-title/"/>
    <id>http://lowry0414.github.io/2023/04/20/post-title/</id>
    <published>2023-04-20T11:48:51.000Z</published>
    <updated>2023-04-20T11:49:52.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="For-Test"><a href="#For-Test" class="headerlink" title="For Test"></a>For Test</h1><h2 id="Why-I-sign-up-the-blog"><a href="#Why-I-sign-up-the-blog" class="headerlink" title="Why I sign up the blog ?"></a>Why I sign up the blog ?</h2><p>事实上，创建博客的初衷起于高中。当时我对科技特别感兴趣，当我看到别人有自己的公众号、网站、博客的时候，我也特别想拥有一个属于自己的公众发布平台。</p><p>因此，我就特地注册了微信公众号，还不止注册了一次。但是当我注册完后，新的问题又来了：怎么运营这个公众号？</p><p>当时的我并没有放太多心思在这上面，因此也就草草发了几篇文章和自己的摄影作品上去，之后就再没有去关注过了。</p><p>到了大学的时候，我学习了网页设计的相关知识，因此心里的那颗种子就愈发想发芽，但是奈何我并没有拥有太多相关知识(上课经常摸鱼)，有心无力。</p><p>等到前段时间，我实在是忍不住了，再难也要试一下。我就根据网上的教程，学习了如何利用GitHub和hexo框架来搭建属于自己的博客。</p><p>经过万般艰辛，终于……你们就看到了现在的页面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;For-Test&quot;&gt;&lt;a href=&quot;#For-Test&quot; class=&quot;headerlink&quot; title=&quot;For Test&quot;&gt;&lt;/a&gt;For Test&lt;/h1&gt;&lt;h2 id=&quot;Why-I-sign-up-the-blog&quot;&gt;&lt;a href=&quot;#Why-I-s</summary>
      
    
    
    
    
    <category term="blog" scheme="http://lowry0414.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础知识_第一章</title>
    <link href="http://lowry0414.github.io/2022/11/09/C%E8%AF%AD%E8%A8%80%E6%80%BB%E7%BB%93/"/>
    <id>http://lowry0414.github.io/2022/11/09/C%E8%AF%AD%E8%A8%80%E6%80%BB%E7%BB%93/</id>
    <published>2022-11-09T12:44:15.000Z</published>
    <updated>2023-04-20T13:43:34.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[TOC]</p><hr><blockquote><p>参考b站尚硅谷的c语言教程所制作！！！</p></blockquote><h3 id="基本知识点："><a href="#基本知识点：" class="headerlink" title="基本知识点："></a>基本知识点：</h3><ul><li><p>计算机的单位：bit；byte；kb；mb；gb；tb；pb</p></li><li><p>8 bit （比特位） = 1 byte （字节） ；</p></li><li><p>常用转义字符：</p><ul><li>\t : 一个制表位，实现对齐的功能</li><li>\n : 换行符</li><li>\ : 一个\</li><li>&quot; : 一个”</li><li>&#39; : 一个’</li><li>\ : 反斜杠</li><li>\r : 一个回车 printf (“Lowry is \r smart”)</li><li>\r不是换行，是回车。例子：printf(“勇士总冠军\r库里”)<ul><li>第一步：    输出：勇士总冠军</li><li>第二步：    回车，相当于重新定位光标，定位到最前面，然后把后面的内容替换成前面的内容</li><li>第三步：    输出： 库里总冠军</li></ul></li></ul></li><li><p>编译： 有了c源文件，通过编译器将其编译成obj文件（目标文件），如果程序没有错误，没有任何提示，但会在debug目录下出现一个.obj文件，该文件为目标文件。</p></li><li><p>链接： 有了目标文件(.obj文件)，通过链接程序将其和运行需要的c库文件链接成exe文件（可执行文件）。如果程序没有错误，没有任何提示，但会在debug目录下出现一个.exe文件，该文件为可执行文件。</p></li><li><p>为什么需要链接库文件？因为我们在编写c程序的时候除了自己的代码，还会用到c程序库里的内容。比如&lt;stdio.h&gt;&lt;stdlib.h&gt;中的printf()system()等等…这些函数不是程序员自己写的，而是c程序库中提供的，因此需要和库文件进行链接。</p></li><li><p>并且你会发现链接后，生成的.exe文件，比obj文件大了很多。</p></li><li><p>单行注释：//             多行注释：/**/</p></li><li><p>tab键：向右移动一个制表位;    shitft+tab:向左移动一个制表位</p><hr></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量：声明变量：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">1</span>  <span class="comment">//整型</span></span><br><span class="line"> <span class="type">double</span> score = <span class="number">2.3</span>    <span class="comment">//小数</span></span><br><span class="line"> <span class="type">char</span> gender = <span class="string">&#x27;A&#x27;</span>    <span class="comment">//字符</span></span><br><span class="line"> <span class="type">char</span> name[]  = <span class="string">&quot;勇士总冠军&quot;</span>    <span class="comment">//字符串</span></span><br><span class="line"> <span class="type">long</span> num1 = <span class="number">123456</span>；<span class="comment">//如果输出的是long，则用 %ld 输出</span></span><br><span class="line"> <span class="type">long</span> <span class="type">long</span> num2 = <span class="number">12345678</span>；  <span class="comment">//如果输出的是long long ，则用 %lld 输出</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num=%d score=%.2f gender=%c name=%s&quot;</span>,num,score,gender,name)</span><br></pre></td></tr></table></figure><p>1.如果输出的是整数：%d</p><p>2.如果输出的是小数：%f，如果希望保留小数点%.2f（意思保留两位小数点）</p><p>3.如果输出的是字符：%c</p><p>4.如果输出的是字符串：%s（c语言里没有字符串，用字符数组表示）</p><ul><li><p>变量表示内存中的一个存储区域（不同的数据类型，占用的空间大小不一样）</p></li><li><p>该区域有自己的名称和类型</p></li><li><p>变量必须先声明，后使用</p></li><li><p>该区域的数据可以在同一类型范围内不断变化</p></li><li><p>变量在同一个作用域内不能重名</p></li><li><p>变量三要素(变量名+值+数据类型)</p><hr></li></ul><h3 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h3><h4 id="C数据类型"><a href="#C数据类型" class="headerlink" title="C数据类型"></a>C数据类型</h4><ul><li><p>基本类型</p><ul><li>数值类型<ul><li>整型<ul><li>短整型 short</li><li>整型 int </li><li>长整型 long</li></ul></li><li>浮点型<ul><li>单精度型 float</li><li>双精度型 double</li></ul></li></ul></li><li>字符类型 char </li></ul></li><li><p>构造类型</p><ul><li>数组</li><li>结构体 struct</li><li>共用体 union</li><li>枚举类型 enum</li></ul></li><li><p>指针类型</p></li><li><p>空类型void</p><hr></li><li><p>每一种数据都定义了明确的数据类型，在内存里分配不同大小的内存空间</p></li><li><p>在c中，没有字符串类型，使用祖父数组表示字符串</p></li><li><p>在不同系统中，部分数据类型字节长度不一样</p><table><thead><tr><th>类型</th><th>存储大小</th></tr></thead><tbody><tr><td>char</td><td>1字节</td></tr><tr><td>unsigned char</td><td>1字节</td></tr><tr><td>signed char</td><td>1字节</td></tr><tr><td>int</td><td>2或4字节</td></tr><tr><td>unsigned char</td><td>2或4字节</td></tr><tr><td>short</td><td>2字节</td></tr><tr><td>unsigned short</td><td>2字节</td></tr><tr><td>long</td><td>4字节</td></tr><tr><td>unsigned long</td><td>4字节</td></tr></tbody></table><hr><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3></li><li><p>浮点型常量默认为double型，声明float型常量时，必须在后面加’f’或’F’</p></li><li><p>浮点型常量有两种表现形式：</p><ul><li>十进制数形式：如：5.12、512.0f、.512（必须有小数点）</li><li>科学计数法： 如：5.12e2（e2表示乘以10^2，即小数点向右移两位）、512E-2</li></ul></li><li><p>通常情况下，应该使用double型，因为他比float更精准</p><ul><li>printf(“d1=%f”,d1);    //在输出时，默认保留小数点6位</li></ul></li></ul><hr><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><ul><li><p>字符常量是用单引号括起来的字符。如：char c1 = ‘a’;</p></li><li><p>c中还允许使用转义字符’&#39;来将其后的字符转变为特殊字符常量。如：char c2 = ‘\n’    //  \n表示换行</p></li><li><p>在C中，char的本质是一个整数，在输出时，是ASCII码对应的字符</p></li><li><p>可以直接给char赋一个整数，然后在输出时，会按照对应的ASCII字符输出。如：char c3 = 97</p></li><li><p>char类型是可以进行运算的，相当于ASCII码对应的整数。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;<span class="comment">//&#x27;a&#x27;对应的ASCII为97</span></span><br><span class="line"><span class="type">int</span> num1 = c1 +<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> c2 = <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num1=%d c2=%c &quot;</span>,num1,c2)<span class="comment">//num1=107 c2=98</span></span><br></pre></td></tr></table></figure><hr><h3 id="字符类型本质探讨"><a href="#字符类型本质探讨" class="headerlink" title="字符类型本质探讨"></a>字符类型本质探讨</h3><ul><li>字符型存储到计算机的过程：将字符对应的ASCII码找出来 —— 转换成二进制 —— 存储</li><li>存储：字符’a’ —— 码值（97） —— 二进制（1100001） —— 存储</li><li>读取：二进制（1100001） —— 码值（97） ——  字符’a’ ——  显示</li><li>字符和码值的对应关系是通过字符编码表决定好的（世界统一的）</li></ul><hr><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul><li>C语言标准（C89）没有定义布尔类型，所以C语言判断真假时，以以0为假，非0为真</li><li>这种做法不直观，所以我们可以借助C语言的宏定义。</li><li>C语言标准(C99)提供了_Bool型，_Bool仍是整数类型，但与一般整型不同的是<br>_Bool变量只能赋值为0或1，非0的值都会被存储为1，C99还提供了一个头文件<br> &lt;stdbool.h&gt; 定义了 bool 代表_Bool , true代表1 ，false代表0。只要导入 stdbool.h，就<br>能方便的操作布尔类型了，比如 bool flag = false</li></ul><hr><h3 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h3><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><ul><li>当C程序在进行 <em>赋值</em> 或者 <em>转换</em>时，精度小的类型 <em>自动转换</em> 成 <em>精度大的</em> 数据类型，这个就是自动类型转换。</li><li>数据类型按精度（容量）大小排序：<ul><li>short - int - unsigned int - long - unsigned long - float - double - long double </li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">float</span> num = str;<span class="comment">//从低精度char自动转换成高精度float</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, num);<span class="comment">//97.000000</span></span><br></pre></td></tr></table></figure><hr><p>自动类型转换细节说明：</p><ul><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成精度最大的那种数据类型<br>然后再进行计算(如int型和short型运算时，先把short转成int型后再进行运算)。</li><li>若两种类型的字节数不同，转换成字节数大的类型，若两种类型的字节数相同，且一种有符号，一种无符号，则转换成无符号类型</li><li>在赋值运算中，赋值号两边量的数据类型不同时，赋值号右边量的类型将转换为左边量的类型，如果石边变量的数据类型长度比左边长时，将去失一部分数据，这样会降低精度，去失的部分按四舍五入向前舍入</li></ul><hr><p>[^分割线更新时间]: 2022年11月9日 20:20</p><hr><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul><li>将精度高的数据类型转换为精度小的数据类型。使用时要加上强制转换符()，但可能造成精度<br>降低或溢出,格外要汪意。</li><li>强制类型转换一般格式如：（类型名）表达式，这种强制类型转换操作并不改变操作数本身</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">double</span> d = <span class="number">156.99</span>;<span class="comment">//转换后d任然是double类型</span></span><br><span class="line">    <span class="type">int</span> num = (<span class="type">int</span>)d;<span class="comment">//这里不是四舍五入，而是直接截断小数点后面的部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>当进行数据的从 精度高 一&gt; 精度低，就需要使用到强制转换</p></li><li><p><strong>强转符号只针对于最近的操作数有效</strong>,往往会使用小括号提升优先级</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = (<span class="type">int</span>)<span class="number">2.4</span>*<span class="number">12</span>;<span class="comment">//24</span></span><br><span class="line"><span class="type">int</span> c = (<span class="type">int</span>)(<span class="number">2.4</span>*<span class="number">12</span>);<span class="comment">//28</span></span><br></pre></td></tr></table></figure><hr><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ul><li>简单来说，指针表示一个地址</li><li>&amp;表示取地址</li></ul><p><a href="https://imgse.com/i/zC4fKJ"><img src="https://s1.ax1x.com/2022/11/11/zC4fKJ.jpg" alt="zC4fKJ.jpg"></a></p><hr><p>[^分割线更新时间]: 2022年11月11日 18：47</p><hr><ul><li>C语言传递参数(或者赋值)可以是值传递，也可以传递指针，传递指针也叫地址传递。</li><li>默认传递值的类型：基本数据类型(整型类型、小数类型，字符类型)，结构体共用体</li><li>默认传递地址的类似：指针、数组</li><li>常量是固定值，在程序执行期间不能改变。这些固定的值，又叫做字面量</li><li>常量可以是任何的基本数据类型，比如整数常量、浮点常量、字符常量，或字符串字面值，也有枚举常量。</li><li>常量的值在定义后不能进行修改</li></ul><h3 id="整数常量"><a href="#整数常量" class="headerlink" title="整数常量"></a>整数常量</h3><ul><li>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或0X表示十六进制，0表示八进制，不带前缀则默认表示十进制。</li><li>整数常量也可以带一个后缀，后缀是U和L的组合，U表示无符号整数（unsigned），L表示长整数（long）。</li><li>后缀可以是大写，也可以是小写，U和L的顺序任意</li></ul><table><thead><tr><th align="center">14</th><th align="center">十进制</th></tr></thead><tbody><tr><td align="center">0414</td><td align="center">八进制</td></tr><tr><td align="center">0x4b</td><td align="center">十六进制</td></tr><tr><td align="center">30</td><td align="center">整数</td></tr><tr><td align="center">30u</td><td align="center">无符号整数</td></tr><tr><td align="center">30l</td><td align="center">长整数</td></tr><tr><td align="center">30ul</td><td align="center">无符号长整数</td></tr></tbody></table><h3 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h3><ul><li>两种方式：使用#define预处理器、使用const关键字</li><li>#define 预处理器定义常量的形式： #define 常量名 常量值（可以不用加分号）例：#define A 1</li><li>const关键字定义常量的形式： const 数据类型 常量名 = 常量值；（要加分号，因为这是个语句）例：const int A = 3;</li></ul><h4 id="const-和-define的区别"><a href="#const-和-define的区别" class="headerlink" title="const 和 #define的区别"></a>const 和 #define的区别</h4><ol><li>const定义的常量时，带类型，define不带类型</li><li>const是在编译、运行的时候起作用，而define是在编译的预处理阶段起作用</li><li>define只是简单的替换，没有类型检查。简单的字符串替换会导致边界效应。</li><li>const常量可以进行调试的，define是不能进行调试的，主要是预编译阶段就已经替换掉了，调试的时候就没它了</li><li>const不能重定义，不可以定义两个一样的，而define通过undef取消某个符号的定义再重新定义</li><li>define可以配合#ifdef、#ifndef、#endif 来使用，可以让代码更加灵活，比如我们可以通过#define 来启动或者关闭调试信。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> A 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B A+3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C A/B*3</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span> <span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c= %d&quot;</span>,C);</span><br><span class="line">    <span class="comment">//分析：#define 只是做一个单纯的替换</span></span><br><span class="line">    <span class="comment">// C = A/A+3*3 = 1/1+3*3 = 1+9 = 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符介绍"><a href="#运算符介绍" class="headerlink" title="运算符介绍"></a>运算符介绍</h3><ul><li>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等<ol><li>算术运算符（ + , - , * , / , % )</li><li>赋值运算符（ =  +=  -=  …）</li><li>关系运算符（比较运算符）（比如&gt; 、&gt;=、&lt; 、&lt;=、==等等)</li><li>逻辑运算符（&amp;&amp;逻辑与、 || 逻辑或 、!逻辑非)</li><li>位运算符(&amp;按位与 、|按位或 、^按位异或 、～按位取反等等）</li><li>三元运算符（表达式？表达1:表达2)</li><li>算术运算符：常用的+，-，*，/。还有一些需要注意的，如下表：</li></ol></li></ul><table><thead><tr><th>运算符</th><th>运算</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>b=4;-b</td><td>-4</td></tr><tr><td>%</td><td>取模（取余）</td><td>7%5</td><td>2</td></tr><tr><td>++</br>++</td><td>先运算再取值</br>先取值再运算</td><td>a=2;b=++a</br>a=2;b=a++</td><td>a=3;b=3</br>a=3;b=2</td></tr><tr><td>–</br>–</td><td>先运算再取值</br>先取值再运算</td><td>a=2;b=–a</br>a=2;b=a–</td><td>a=1;b=1</br>a=1;b=a</td></tr></tbody></table><h4 id="算术运算细节说明"><a href="#算术运算细节说明" class="headerlink" title="算术运算细节说明"></a>算术运算细节说明</h4><ol><li>对于除号“/“，它的整数除和小数出是有区别的，整数之间做除法时，只保留整数部分而直接舍去小数部分。例：10/4 = 2</li><li>当自增当做一个独立语言使用时，不管是++i；还是i++；都是一样的，等价</li></ol><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><ol><li>结合的方向只有三个是从右向左，其余都是从左向右</li><li>所有的双目运算符中只有赋值运算符的结合方向是从右向左</li><li>另外两个从右向左的结合运算符，一个是单目运算，还有一个是三目运算</li><li>逗号的运算符优先级最低</li><li>说一下优先级的大概的顺序：算术运算符&gt;关系运算符&gt;逻辑运算符(逻辑非！除外)&gt;赋值运算符&gt;逗号运算符</li><li>注意不需要刻意的记,常用就慢慢有印象</li></ol><h4 id="关系运算符（比较运算符）"><a href="#关系运算符（比较运算符）" class="headerlink" title="关系运算符（比较运算符）"></a>关系运算符（比较运算符）</h4><ul><li>关系运算符的结果要么是真（非0表示），要么是假（0表示）</li><li>关系表达式常用于if结构的条件中或循环结构的条件中</li></ul><table><thead><tr><th>运算符</th><th>运算</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4==3</td><td>false</td></tr><tr><td>!=</td><td>不等于</td><td>4!=3</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>4&lt;3</td><td>false</td></tr><tr><td>&gt;</td><td>大于</td><td>4&gt;3</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4&lt;=3</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4&gt;=3</td><td>true</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>例子</br>假设：a=1;b=0</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。如果两个操作都非零(真）则条件为真，否则结果为0(假)</td><td>(a&amp;&amp;b)为假</td></tr><tr><td>||</td><td>称为逻辑或运算符。如果有任意一个操作为真，则条件为真</td><td>（a||b)为真</td></tr><tr><td>!</td><td>称为逻辑非运算符。用来逆转操作数的逻辑状态。</td><td>!(a&amp;&amp;b)为真</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a= <span class="number">10</span>,b= <span class="number">99</span>;</span><br><span class="line"><span class="comment">//说明:</span></span><br><span class="line"><span class="comment">//1. 在进行&amp;&amp; 操作时,如果第一个条件为 false,则后面的条件不再判断</span></span><br><span class="line"><span class="comment">//2.该现象称为短路现象，所以逻辑与也称为短路逻辑与</span></span><br><span class="line"><span class="keyword">if</span>(a &lt;<span class="number">2</span> &amp;&amp; ++b&gt;<span class="number">99</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ok100&quot;</span>):</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b= %d&quot;</span>, b); <span class="comment">//b=99</span></span><br></pre></td></tr></table></figure><h5 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">short</span> z = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">if</span>((z++ == <span class="number">42</span>)&amp;&amp;(y=<span class="number">1</span>))&#123;<span class="comment">//z=43,y=1</span></span><br><span class="line">        z++;   <span class="comment">//z=44</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((x=<span class="number">0</span>)||(++z==<span class="number">45</span>)&#123;<span class="comment">//x=0;z=45</span></span><br><span class="line">        z++;   <span class="comment">//z=46</span></span><br><span class="line">    &#125;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;z=%d&quot;</span>,z);</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">/*一定要分清=和==的区别！！！</span></span><br><span class="line"><span class="comment">       =是赋值，==是比较是否相等</span></span><br><span class="line"><span class="comment">       */</span></span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li>就是将某个运算后的值，赋给指定的变量。</li><li>赋值运算符有：=，+=，-=，*=，/=，%=<ul><li>例子：c += a;相当于c= c+a; 其他以此类推。</li></ul></li><li>位运算符：&lt;&lt;=, &gt;&gt;=, &amp;=, ^=, |=</li></ul><table><thead><tr><th>&lt;&lt;=</th><th>左移且赋值运算符</th><th>C &lt;&lt;=2 等同于 C=C&lt;&lt; 2</th></tr></thead><tbody><tr><td>&gt;&gt;=</td><td>右移且赋值运算符</td><td>C &gt;&gt;=2 等同于 C=C&gt;&gt; 2</td></tr><tr><td>&amp;=</td><td>按位与且赋值运算符</td><td>c &amp;=2 等同于 c=c&amp;2</td></tr><tr><td>^=</td><td>按位异或且赋值运算符</td><td>c^=2 等同于 c= c^2</td></tr><tr><td>|=</td><td>按位或且赋值运算符</td><td>c |= 2 等同于 c= c|2</td></tr></tbody></table><h3 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h3><ul><li>在编程中、需要接收用户输入的数据，就可以使用键盘输入语句来获取。lnputDemo.c</li><li>步骤:<ol><li>include &lt;stdio.h&gt;</li><li>使用scanf 函数</li><li>使用适当的格式参数接收输入</li></ol></li></ul><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><ul><li>对于整数，有四种表示方式<ol><li>二进制:0,1，满2进1，C语言中没有二进制常数的表示方法</li><li>八进制:0-7，满8进1。以数字0开头表示。</li><li>十进制:0-9，满10进1</li><li>十六进制：0-9及A-F，满16进1，以 <em>0x或0X</em> 开头表示。此处的A-F不区分大小写。如:0x21AF +1= 0X21B0</li></ol></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num1 = <span class="number">210</span>;<span class="comment">//十进制，没有前缀</span></span><br><span class="line"><span class="type">int</span> num2 = <span class="number">0210</span>;<span class="comment">//八进制，以0开头</span></span><br><span class="line"><span class="type">int</span> num3 = <span class="number">0x1210</span>;<span class="comment">//十六进制，以0x开头</span></span><br></pre></td></tr></table></figure><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><ol><li><em><strong>二进制</strong></em> 转换成 <em><strong>十进制</strong></em>示例：<ol><li>规则：从最低位开始，将每个位上的数提取出来，乘以2的(位数-1)次方，然后求和。</li><li>案例：请将二进制1011转成十进制的数</li></ol></li><li><em><strong>八进制</strong></em> 转换成 <em><strong>十进制</strong></em>示例<ol><li>规则：从最低位开始，将每个位上的数提取出来，乘以8的(位数-1)次方，然后求和。</li><li>案例：请将0123转成十进制的数</li></ol></li><li><em><strong>十六进制</strong></em> 转换成 <em><strong>十进制</strong></em>示例<ol><li>规则：从最低位开始，将每个位上的数提取出来，乘以16的(位数-1)次方，然后求和。</li><li>案例：请将0x34A转成十进制的数</li></ol></li><li>**<em>十进制</em> **转 <em><strong>二进制</strong></em><ol><li>规则：将该数不断除以2，直到商为0为止，然后将每步得到的余数倒过来，就是对应的二进制</li><li><a href="https://imgse.com/i/zFzOud"><img src="https://s1.ax1x.com/2022/11/13/zFzOud.jpg" alt="zFzOud.jpg"></a></li></ol></li><li><em><strong>十讲制</strong></em> 转换成 <em><strong>八进制</strong></em>，规则：将该数不断除以8，直到商为0为止，然后将每步得到的余数倒过来，就是对应的八进制。</li><li><em><strong>十进制</strong></em> 转换成 <em><strong>十六进制</strong></em>，规则：将该数不断除以16，直到商为0为止，然后将每步得到的余数倒过来，就是对应的十六进制。</li><li><em><strong>二进制</strong></em> 转换成 <em><strong>八进制</strong></em>，规则：从低位开始,将二进制数每三位一组，转成对应的八进制数即可。<br>案例：请将11010101转成八进制：*<u>11</u>* <em><u>010</u></em> <em><u>101</u></em>=&gt; 0325</li><li><em><strong>二进制</strong></em> 转换成 <em><strong>十六进制</strong></em>，规则：低位开始，将二进制数每四位一组，转成对应的十六进制数即可。 =&gt; 案例：请将11010101转成十六进制 : <em><u>1101</u></em> <em><u>0101</u></em> = 0xD5</li><li><em><strong>八进制</strong></em> 转换成 <em><strong>二进制</strong></em>,规则：将八进制数每1位,转成对应的一个3位的二进制数即可。</li><li><em><strong>十六进制</strong></em> 转换成 <em><strong>二进制</strong></em>, 规则：将十六进制数每1位,转成对应的4位的一个二进制数即可。</li></ol><h3 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h3><ul><li>对于有符号的而言:<ol><li><p>二进制的最高位是符号位:0表示正数,1表示负数</p></li><li><p>正数的原码，反码，补码都一样（三码合一）</p></li><li><p>负数的反码=它的原码符号位不变，其它位取反(0-&gt;1,1-&gt;0）</p></li><li><p>负数的补码=它的反码+1</p></li><li><p>0的反码，补码都是0</p></li><li><p>在计算机运算的时候，都是以补码的方式来运算的</p></li></ol></li></ul><h3 id="位运算符-重点难点"><a href="#位运算符-重点难点" class="headerlink" title="位运算符 _ (  重点难点  )"></a>位运算符 _ (  <em>重点难点</em>  )</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与操作，按二进制进行“与”运算。</br>运算规则：0&amp;0=0；0&amp;1=0;1&amp;0=01&amp;1=1；</td></tr><tr><td>|</td><td>按位或操作，按二进制进行“或”运算。</br>运算规则：0|1=1；0|0=0；1|1=1；1|0=1；</td></tr><tr><td>^</td><td>异或运算符，按二进制进行“异或”运算。</br>运算规则：0^0=0;1^1=0; 1^0=1;0^1=1;</td></tr><tr><td>~</td><td>取反运算符，按二进制位进行“取反”运算。</br>运算规则：~1=0; ~0=1;</td></tr><tr><td>&lt;&lt;</td><td>二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0 )</td></tr><tr><td>&gt;&gt;</td><td>二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负效左补1，右边丢弃。（说白了就是补符号位）</td></tr></tbody></table><ul><li>算术左移：符号位不变，低位补0</li><li>算术右移：低位溢出,符号位不变,并用符号位补溢出的高位</li></ul><h5 id="练习：-1"><a href="#练习：-1" class="headerlink" title="练习："></a>练习：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>&gt;&gt;<span class="number">2</span>;<span class="comment">//a?</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">-1</span>&gt;&gt;<span class="number">2</span>;<span class="comment">//b?</span></span><br><span class="line"><span class="type">int</span> c = <span class="number">1</span>&lt;&lt;<span class="number">2</span>;<span class="comment">//c?</span></span><br></pre></td></tr></table></figure><hr><h3 id="程序流程控制介绍"><a href="#程序流程控制介绍" class="headerlink" title="程序流程控制介绍"></a>程序流程控制介绍</h3><ul><li>在程序中，程序运行的流程控制决定程序是如何执行的，是我们必须掌握的主要有三大流程控制语句<ol><li>顺序控制</li><li>分支控制</li><li>循环控制</li></ol></li></ul><ol><li><p>顺序控制介绍：程序从上到下逐行的执行，中间没有任何判断和跳转。</p></li><li><p>分支控制if-else：</p><ol><li>单分支_if(){}</li><li>双分支_if(){}else{}</li><li>多分支_if()else if(){}else{}</li></ol></li><li><p>switch分支结构：</p><ol><li>switch细节讨论<ol><li>switch语句中的 expression是一个常量表达式，必须是一个整型(char、short, int, long等）或枚举类型</li><li>case子句中的值必须是常量,而不能是变量</li><li>default子句是可选的，当没有匹配的case时，执行default</li><li> break语句用来在执行完一个case分支后使程序跳出switch语句块</li><li>如果没有写break，会执行下一个case 语句块，直到遇到break或者执行到switch结尾，这个现象称为穿透。</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>：<span class="comment">//当表达式值等于常量1时，执行语句块1</span></span><br><span class="line">        语句块<span class="number">1</span>；</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//退出switch</span></span><br><span class="line">     <span class="keyword">case</span> 常量<span class="number">2</span>：</span><br><span class="line">         语句块<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//如果没有break，就继续往下执行，直到遇到break退出</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">default</span>语句块;<span class="comment">//当以上情况都不存在时，执行default语句块</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch和if的比较：</p><ol><li>如果判断的具体数值不多，而且符合整型、枚举类型。虽然两种语句都可以，但是还是建议使用switch语句。</li><li>其他情况，对区间判断，对结果为真假的判断，使用if，if的使用范围更广。</li></ol></li><li><p>for循环控制：</p><ol><li>循环条件是返回一个表示真(非0)假(0）的表达式</li><li>for(;循环判断条件;）中的初始化和变量迭代可以不写（写到其它地方），但是两边的分号不能省略。</li><li>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开。例子：for(i = 0,j= 0;j&lt; count; i++,j+= 2）</li></ol></li><li><p>while循环控制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;<span class="comment">//循环变量初始化;</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">3</span>)&#123;<span class="comment">//循环条件</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;halo&quot;</span>);<span class="comment">//循环体;</span></span><br><span class="line">    i++;<span class="comment">//循环变量迭代;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do…while循环控制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;<span class="comment">//循环变量初始化</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;halo&quot;</span>);<span class="comment">//循环体(多条语句)</span></span><br><span class="line">        i++;<span class="comment">//循环变量迭代</span></span><br><span class="line">    &#125;<span class="keyword">while</span>(i&lt;<span class="number">5</span>);<span class="comment">//循环条件</span></span><br></pre></td></tr></table></figure></li><li><p>多重循环控制：</p><ol><li>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for,while,do…while均可以作为外层循环和内层循环。建议一般使用两层，最多不要超过三层，太多了自己都看不懂。</li><li>实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为false时，才会完全跳出内层循坏，才可结束外层的当次循环，开始下一次的循环。</li><li>设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n=mn次</li></ol></li><li><p>跳转控制语句：</p><ol><li><p>break语句用于终止某个语句块的执行，一般使用在switch或者循环（三大循环中），可以理解为跳出此次循环，不继续执行。</p></li><li><p>continue语句用于结束本次循环，继续执行下一次循环。continue语句只能配合循环语句使用，不能单独和switch/if使用。</p></li><li><p>goto语句可以无条件的转移到程序中指定的行。在c程序设计中一般不主张使用goto语句，以免造成程序的混乱，使理解和调试程序都产生困难。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">goto</span> label;<span class="comment">//label名字自己取</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">lable:statement <span class="comment">//直接跳转到指定的这里，执行这里的语句块</span></span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;[TOC]&lt;</summary>
      
    
    
    
    
    <category term="C语言" scheme="http://lowry0414.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
